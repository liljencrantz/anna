
/*
  WARNING! This file is automatically generated by the make_anna_int_i.sh script.
  Do not edit it directly, your changes will be overwritten!
*/


static anna_vmstack_t *anna_int_i_add(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create(v1 + v2));
    return stack;
}


static anna_vmstack_t *anna_int_i_increaseAssign(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create(v1 + v2));
    return stack;
}


static anna_vmstack_t *anna_int_i_sub(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create(v1 - v2));
    return stack;
}


static anna_vmstack_t *anna_int_i_decreaseAssign(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create(v1 - v2));
    return stack;
}


static anna_vmstack_t *anna_int_i_mul(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create(v1 * v2));
    return stack;
}


static anna_vmstack_t *anna_int_i_div(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create(v1 / v2));
    return stack;
}


static anna_vmstack_t *anna_int_i_shl(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create(v1 << v2));
    return stack;
}


static anna_vmstack_t *anna_int_i_shr(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create(v1 >> v2));
    return stack;
}


static anna_vmstack_t *anna_int_i_mod(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create(v1 % v2));
    return stack;
}


static anna_vmstack_t *anna_int_i_bitand(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create(v1 & v2));
    return stack;
}


static anna_vmstack_t *anna_int_i_bitor(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create(v1 | v2));
    return stack;
}


static anna_vmstack_t *anna_int_i_xor(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create(v1 ^ v2));
    return stack;
}


static anna_vmstack_t *anna_int_i_cshl(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create((v1 << v2) | (v1 >> (32-v2))));
    return stack;
}


static anna_vmstack_t *anna_int_i_cshr(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 2;
    if(param[1]==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push(stack, null_object);
        return stack;
    }  
    int v1 = anna_int_get(param[0]);
    int v2 = anna_int_get(param[1]);
    anna_vmstack_drop(stack, 3);
    anna_vmstack_push(stack, anna_int_create((v1 >> v2) | (v1 << (32-v2))));
    return stack;
}


static anna_vmstack_t *anna_int_i_abs(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 1;
    int v1 = anna_int_get(param[0]);
    anna_vmstack_drop(stack, 2);
    anna_vmstack_push(stack, anna_int_create(abs(v1)));
    return stack;
}


static anna_vmstack_t *anna_int_i_neg(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 1;
    int v1 = anna_int_get(param[0]);
    anna_vmstack_drop(stack, 2);
    anna_vmstack_push(stack, anna_int_create(-v1));
    return stack;
}


static anna_vmstack_t *anna_int_i_bitnot(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 1;
    int v1 = anna_int_get(param[0]);
    anna_vmstack_drop(stack, 2);
    anna_vmstack_push(stack, anna_int_create(~v1));
    return stack;
}


static anna_vmstack_t *anna_int_i_sign(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 1;
    int v1 = anna_int_get(param[0]);
    anna_vmstack_drop(stack, 2);
    anna_vmstack_push(stack, anna_int_create(v1==0?0:(v1>0?1:-1)));
    return stack;
}


static anna_vmstack_t *anna_int_i_nextAssign(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 1;
    int v = anna_int_get(param[0]);
    anna_vmstack_drop(stack, 2);
    anna_vmstack_push(stack, anna_int_create(v+1));
    return stack;
}


static anna_vmstack_t *anna_int_i_prevAssign(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_object_t **param = stack->top - 1;
    int v = anna_int_get(param[0]);
    anna_vmstack_drop(stack, 2);
    anna_vmstack_push(stack, anna_int_create(v-1));
    return stack;
}


static void anna_int_type_i_create(anna_stack_template_t *stack)
{


    anna_type_t *argv[]=
	{
	    int_type, int_type
	}
    ;
    
    wchar_t *argn[]=
	{
	  L"this", L"value"
	}
    ;
    mid_t mmid;
    anna_function_t *fun;

    mmid = anna_native_method_create(
	int_type, -1, L"__add__Int__", 0, 
	&anna_int_i_add, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__add__");


    mmid = anna_native_method_create(
	int_type, -1, L"__increaseAssign__Int__", 0, 
	&anna_int_i_increaseAssign, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__increaseAssign__");


    mmid = anna_native_method_create(
	int_type, -1, L"__sub__Int__", 0, 
	&anna_int_i_sub, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__sub__");


    mmid = anna_native_method_create(
	int_type, -1, L"__decreaseAssign__Int__", 0, 
	&anna_int_i_decreaseAssign, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__decreaseAssign__");


    mmid = anna_native_method_create(
	int_type, -1, L"__mul__Int__", 0, 
	&anna_int_i_mul, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__mul__");


    mmid = anna_native_method_create(
	int_type, -1, L"__div__Int__", 0, 
	&anna_int_i_div, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__div__");


    mmid = anna_native_method_create(
	int_type, -1, L"__shl__Int__", 0, 
	&anna_int_i_shl, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__shl__");


    mmid = anna_native_method_create(
	int_type, -1, L"__shr__Int__", 0, 
	&anna_int_i_shr, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__shr__");


    mmid = anna_native_method_create(
	int_type, -1, L"__mod__Int__", 0, 
	&anna_int_i_mod, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__mod__");


    mmid = anna_native_method_create(
	int_type, -1, L"__bitand__Int__", 0, 
	&anna_int_i_bitand, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__bitand__");


    mmid = anna_native_method_create(
	int_type, -1, L"__bitor__Int__", 0, 
	&anna_int_i_bitor, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__bitor__");


    mmid = anna_native_method_create(
	int_type, -1, L"__xor__Int__", 0, 
	&anna_int_i_xor, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__xor__");


    mmid = anna_native_method_create(
	int_type, -1, L"__cshl__Int__", 0, 
	&anna_int_i_cshl, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__cshl__");


    mmid = anna_native_method_create(
	int_type, -1, L"__cshr__Int__", 0, 
	&anna_int_i_cshr, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(*anna_static_member_addr_get_mid(int_type, mmid));
    anna_function_alias_add(fun, L"__cshr__");



    anna_native_method_create(
	int_type, -1, L"__abs__", 0, 
	&anna_int_i_abs, 
	int_type,
	1, argv, argn);

    anna_native_method_create(
	int_type, -1, L"__neg__", 0, 
	&anna_int_i_neg, 
	int_type,
	1, argv, argn);

    anna_native_method_create(
	int_type, -1, L"__bitnot__", 0, 
	&anna_int_i_bitnot, 
	int_type,
	1, argv, argn);

    anna_native_method_create(
	int_type, -1, L"__sign__", 0, 
	&anna_int_i_sign, 
	int_type,
	1, argv, argn);


    anna_native_method_create(
	int_type, -1, L"__nextAssign__", 0, 
	&anna_int_i_nextAssign, 
	int_type,
	1, argv, argn);

    anna_native_method_create(
	int_type, -1, L"__prevAssign__", 0, 
	&anna_int_i_prevAssign, 
	int_type,
	1, argv, argn);

}

