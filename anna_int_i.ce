
/*
  WARNING! This file is automatically generated by the make_anna_int_i.sh script.
  Do not edit it directly, your changes will be overwritten!
*/


static anna_vmstack_t *anna_int_i_add(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 2;
    if(anna_is_obj(param[1]) && anna_as_obj(param[1])==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push_object(stack, null_object);
        return stack;
    }
    mpz_t tmp1, tmp2;
    mpz_t *v1, *v2;
    if(anna_is_int_small(param[0]))
    {
        v1 = &tmp1;
        mpz_init(tmp1);
        mpz_set_si(tmp1, anna_as_int(param[0]));
    }
    else 
    {
        v1 = anna_int_unwrap(anna_as_obj_fast(param[0]));
    }
    if(anna_is_int_small(param[1]))
    {
        v2 = &tmp2;
        mpz_init(tmp2);
        mpz_set_si(tmp2, anna_as_int(param[1]));
    }
    else 
    {
        v2 = anna_int_unwrap(anna_as_obj_fast(param[1]));
    }

    mpz_t res;
    mpz_init(res);
    mpz_add(res, *v1, *v2);
    anna_vmstack_drop(stack, 3);

//    wprintf(L"Perform bignum op add, %s add %s = %s\n", mpz_get_str(0, 10, *v1), mpz_get_str(0, 10, *v2),mpz_get_str(0, 10, res));

    if(mpz_sizeinbase(res, 2)<= ANNA_SMALL_MAX_BIT)
    {
        anna_vmstack_push_int(stack, mpz_get_si(res));
    }
    else{
        anna_vmstack_push_object(stack, anna_int_create_mp(res));
    }

    if(anna_is_int_small(param[0]))
    {
        mpz_clear(tmp1);
    }
    if(anna_is_int_small(param[1]))
    {
        mpz_clear(tmp2);
    }
    mpz_clear(res);

    return stack;
}


static anna_vmstack_t *anna_int_i_increaseAssign(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 2;
    if(anna_is_obj(param[1]) && anna_as_obj(param[1])==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push_object(stack, null_object);
        return stack;
    }
    mpz_t tmp1, tmp2;
    mpz_t *v1, *v2;
    if(anna_is_int_small(param[0]))
    {
        v1 = &tmp1;
        mpz_init(tmp1);
        mpz_set_si(tmp1, anna_as_int(param[0]));
    }
    else 
    {
        v1 = anna_int_unwrap(anna_as_obj_fast(param[0]));
    }
    if(anna_is_int_small(param[1]))
    {
        v2 = &tmp2;
        mpz_init(tmp2);
        mpz_set_si(tmp2, anna_as_int(param[1]));
    }
    else 
    {
        v2 = anna_int_unwrap(anna_as_obj_fast(param[1]));
    }

    mpz_t res;
    mpz_init(res);
    mpz_add(res, *v1, *v2);
    anna_vmstack_drop(stack, 3);

//    wprintf(L"Perform bignum op increaseAssign, %s increaseAssign %s = %s\n", mpz_get_str(0, 10, *v1), mpz_get_str(0, 10, *v2),mpz_get_str(0, 10, res));

    if(mpz_sizeinbase(res, 2)<= ANNA_SMALL_MAX_BIT)
    {
        anna_vmstack_push_int(stack, mpz_get_si(res));
    }
    else{
        anna_vmstack_push_object(stack, anna_int_create_mp(res));
    }

    if(anna_is_int_small(param[0]))
    {
        mpz_clear(tmp1);
    }
    if(anna_is_int_small(param[1]))
    {
        mpz_clear(tmp2);
    }
    mpz_clear(res);

    return stack;
}


static anna_vmstack_t *anna_int_i_sub(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 2;
    if(anna_is_obj(param[1]) && anna_as_obj(param[1])==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push_object(stack, null_object);
        return stack;
    }
    mpz_t tmp1, tmp2;
    mpz_t *v1, *v2;
    if(anna_is_int_small(param[0]))
    {
        v1 = &tmp1;
        mpz_init(tmp1);
        mpz_set_si(tmp1, anna_as_int(param[0]));
    }
    else 
    {
        v1 = anna_int_unwrap(anna_as_obj_fast(param[0]));
    }
    if(anna_is_int_small(param[1]))
    {
        v2 = &tmp2;
        mpz_init(tmp2);
        mpz_set_si(tmp2, anna_as_int(param[1]));
    }
    else 
    {
        v2 = anna_int_unwrap(anna_as_obj_fast(param[1]));
    }

    mpz_t res;
    mpz_init(res);
    mpz_sub(res, *v1, *v2);
    anna_vmstack_drop(stack, 3);

//    wprintf(L"Perform bignum op sub, %s sub %s = %s\n", mpz_get_str(0, 10, *v1), mpz_get_str(0, 10, *v2),mpz_get_str(0, 10, res));

    if(mpz_sizeinbase(res, 2)<= ANNA_SMALL_MAX_BIT)
    {
        anna_vmstack_push_int(stack, mpz_get_si(res));
    }
    else{
        anna_vmstack_push_object(stack, anna_int_create_mp(res));
    }

    if(anna_is_int_small(param[0]))
    {
        mpz_clear(tmp1);
    }
    if(anna_is_int_small(param[1]))
    {
        mpz_clear(tmp2);
    }
    mpz_clear(res);

    return stack;
}


static anna_vmstack_t *anna_int_i_decreaseAssign(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 2;
    if(anna_is_obj(param[1]) && anna_as_obj(param[1])==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push_object(stack, null_object);
        return stack;
    }
    mpz_t tmp1, tmp2;
    mpz_t *v1, *v2;
    if(anna_is_int_small(param[0]))
    {
        v1 = &tmp1;
        mpz_init(tmp1);
        mpz_set_si(tmp1, anna_as_int(param[0]));
    }
    else 
    {
        v1 = anna_int_unwrap(anna_as_obj_fast(param[0]));
    }
    if(anna_is_int_small(param[1]))
    {
        v2 = &tmp2;
        mpz_init(tmp2);
        mpz_set_si(tmp2, anna_as_int(param[1]));
    }
    else 
    {
        v2 = anna_int_unwrap(anna_as_obj_fast(param[1]));
    }

    mpz_t res;
    mpz_init(res);
    mpz_sub(res, *v1, *v2);
    anna_vmstack_drop(stack, 3);

//    wprintf(L"Perform bignum op decreaseAssign, %s decreaseAssign %s = %s\n", mpz_get_str(0, 10, *v1), mpz_get_str(0, 10, *v2),mpz_get_str(0, 10, res));

    if(mpz_sizeinbase(res, 2)<= ANNA_SMALL_MAX_BIT)
    {
        anna_vmstack_push_int(stack, mpz_get_si(res));
    }
    else{
        anna_vmstack_push_object(stack, anna_int_create_mp(res));
    }

    if(anna_is_int_small(param[0]))
    {
        mpz_clear(tmp1);
    }
    if(anna_is_int_small(param[1]))
    {
        mpz_clear(tmp2);
    }
    mpz_clear(res);

    return stack;
}


static anna_vmstack_t *anna_int_i_mul(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 2;
    if(anna_is_obj(param[1]) && anna_as_obj(param[1])==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push_object(stack, null_object);
        return stack;
    }
    mpz_t tmp1, tmp2;
    mpz_t *v1, *v2;
    if(anna_is_int_small(param[0]))
    {
        v1 = &tmp1;
        mpz_init(tmp1);
        mpz_set_si(tmp1, anna_as_int(param[0]));
    }
    else 
    {
        v1 = anna_int_unwrap(anna_as_obj_fast(param[0]));
    }
    if(anna_is_int_small(param[1]))
    {
        v2 = &tmp2;
        mpz_init(tmp2);
        mpz_set_si(tmp2, anna_as_int(param[1]));
    }
    else 
    {
        v2 = anna_int_unwrap(anna_as_obj_fast(param[1]));
    }

    mpz_t res;
    mpz_init(res);
    mpz_mul(res, *v1, *v2);
    anna_vmstack_drop(stack, 3);

//    wprintf(L"Perform bignum op mul, %s mul %s = %s\n", mpz_get_str(0, 10, *v1), mpz_get_str(0, 10, *v2),mpz_get_str(0, 10, res));

    if(mpz_sizeinbase(res, 2)<= ANNA_SMALL_MAX_BIT)
    {
        anna_vmstack_push_int(stack, mpz_get_si(res));
    }
    else{
        anna_vmstack_push_object(stack, anna_int_create_mp(res));
    }

    if(anna_is_int_small(param[0]))
    {
        mpz_clear(tmp1);
    }
    if(anna_is_int_small(param[1]))
    {
        mpz_clear(tmp2);
    }
    mpz_clear(res);

    return stack;
}


static anna_vmstack_t *anna_int_i_div(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 2;
    if(anna_is_obj(param[1]) && anna_as_obj(param[1])==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push_object(stack, null_object);
        return stack;
    }
    mpz_t tmp1, tmp2;
    mpz_t *v1, *v2;
    if(anna_is_int_small(param[0]))
    {
        v1 = &tmp1;
        mpz_init(tmp1);
        mpz_set_si(tmp1, anna_as_int(param[0]));
    }
    else 
    {
        v1 = anna_int_unwrap(anna_as_obj_fast(param[0]));
    }
    if(anna_is_int_small(param[1]))
    {
        v2 = &tmp2;
        mpz_init(tmp2);
        mpz_set_si(tmp2, anna_as_int(param[1]));
    }
    else 
    {
        v2 = anna_int_unwrap(anna_as_obj_fast(param[1]));
    }

    mpz_t res;
    mpz_init(res);
    mpz_fdiv_q(res, *v1, *v2);
    anna_vmstack_drop(stack, 3);

//    wprintf(L"Perform bignum op div, %s div %s = %s\n", mpz_get_str(0, 10, *v1), mpz_get_str(0, 10, *v2),mpz_get_str(0, 10, res));

    if(mpz_sizeinbase(res, 2)<= ANNA_SMALL_MAX_BIT)
    {
        anna_vmstack_push_int(stack, mpz_get_si(res));
    }
    else{
        anna_vmstack_push_object(stack, anna_int_create_mp(res));
    }

    if(anna_is_int_small(param[0]))
    {
        mpz_clear(tmp1);
    }
    if(anna_is_int_small(param[1]))
    {
        mpz_clear(tmp2);
    }
    mpz_clear(res);

    return stack;
}


static anna_vmstack_t *anna_int_i_mod(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 2;
    if(anna_is_obj(param[1]) && anna_as_obj(param[1])==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push_object(stack, null_object);
        return stack;
    }
    mpz_t tmp1, tmp2;
    mpz_t *v1, *v2;
    if(anna_is_int_small(param[0]))
    {
        v1 = &tmp1;
        mpz_init(tmp1);
        mpz_set_si(tmp1, anna_as_int(param[0]));
    }
    else 
    {
        v1 = anna_int_unwrap(anna_as_obj_fast(param[0]));
    }
    if(anna_is_int_small(param[1]))
    {
        v2 = &tmp2;
        mpz_init(tmp2);
        mpz_set_si(tmp2, anna_as_int(param[1]));
    }
    else 
    {
        v2 = anna_int_unwrap(anna_as_obj_fast(param[1]));
    }

    mpz_t res;
    mpz_init(res);
    mpz_mod(res, *v1, *v2);
    anna_vmstack_drop(stack, 3);

//    wprintf(L"Perform bignum op mod, %s mod %s = %s\n", mpz_get_str(0, 10, *v1), mpz_get_str(0, 10, *v2),mpz_get_str(0, 10, res));

    if(mpz_sizeinbase(res, 2)<= ANNA_SMALL_MAX_BIT)
    {
        anna_vmstack_push_int(stack, mpz_get_si(res));
    }
    else{
        anna_vmstack_push_object(stack, anna_int_create_mp(res));
    }

    if(anna_is_int_small(param[0]))
    {
        mpz_clear(tmp1);
    }
    if(anna_is_int_small(param[1]))
    {
        mpz_clear(tmp2);
    }
    mpz_clear(res);

    return stack;
}


static anna_vmstack_t *anna_int_i_bitand(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 2;
    if(anna_is_obj(param[1]) && anna_as_obj(param[1])==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push_object(stack, null_object);
        return stack;
    }
    mpz_t tmp1, tmp2;
    mpz_t *v1, *v2;
    if(anna_is_int_small(param[0]))
    {
        v1 = &tmp1;
        mpz_init(tmp1);
        mpz_set_si(tmp1, anna_as_int(param[0]));
    }
    else 
    {
        v1 = anna_int_unwrap(anna_as_obj_fast(param[0]));
    }
    if(anna_is_int_small(param[1]))
    {
        v2 = &tmp2;
        mpz_init(tmp2);
        mpz_set_si(tmp2, anna_as_int(param[1]));
    }
    else 
    {
        v2 = anna_int_unwrap(anna_as_obj_fast(param[1]));
    }

    mpz_t res;
    mpz_init(res);
    mpz_and(res, *v1, *v2);
    anna_vmstack_drop(stack, 3);

//    wprintf(L"Perform bignum op bitand, %s bitand %s = %s\n", mpz_get_str(0, 10, *v1), mpz_get_str(0, 10, *v2),mpz_get_str(0, 10, res));

    if(mpz_sizeinbase(res, 2)<= ANNA_SMALL_MAX_BIT)
    {
        anna_vmstack_push_int(stack, mpz_get_si(res));
    }
    else{
        anna_vmstack_push_object(stack, anna_int_create_mp(res));
    }

    if(anna_is_int_small(param[0]))
    {
        mpz_clear(tmp1);
    }
    if(anna_is_int_small(param[1]))
    {
        mpz_clear(tmp2);
    }
    mpz_clear(res);

    return stack;
}


static anna_vmstack_t *anna_int_i_bitor(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 2;
    if(anna_is_obj(param[1]) && anna_as_obj(param[1])==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push_object(stack, null_object);
        return stack;
    }
    mpz_t tmp1, tmp2;
    mpz_t *v1, *v2;
    if(anna_is_int_small(param[0]))
    {
        v1 = &tmp1;
        mpz_init(tmp1);
        mpz_set_si(tmp1, anna_as_int(param[0]));
    }
    else 
    {
        v1 = anna_int_unwrap(anna_as_obj_fast(param[0]));
    }
    if(anna_is_int_small(param[1]))
    {
        v2 = &tmp2;
        mpz_init(tmp2);
        mpz_set_si(tmp2, anna_as_int(param[1]));
    }
    else 
    {
        v2 = anna_int_unwrap(anna_as_obj_fast(param[1]));
    }

    mpz_t res;
    mpz_init(res);
    mpz_ior(res, *v1, *v2);
    anna_vmstack_drop(stack, 3);

//    wprintf(L"Perform bignum op bitor, %s bitor %s = %s\n", mpz_get_str(0, 10, *v1), mpz_get_str(0, 10, *v2),mpz_get_str(0, 10, res));

    if(mpz_sizeinbase(res, 2)<= ANNA_SMALL_MAX_BIT)
    {
        anna_vmstack_push_int(stack, mpz_get_si(res));
    }
    else{
        anna_vmstack_push_object(stack, anna_int_create_mp(res));
    }

    if(anna_is_int_small(param[0]))
    {
        mpz_clear(tmp1);
    }
    if(anna_is_int_small(param[1]))
    {
        mpz_clear(tmp2);
    }
    mpz_clear(res);

    return stack;
}


static anna_vmstack_t *anna_int_i_bitxor(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 2;
    if(anna_is_obj(param[1]) && anna_as_obj(param[1])==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push_object(stack, null_object);
        return stack;
    }
    mpz_t tmp1, tmp2;
    mpz_t *v1, *v2;
    if(anna_is_int_small(param[0]))
    {
        v1 = &tmp1;
        mpz_init(tmp1);
        mpz_set_si(tmp1, anna_as_int(param[0]));
    }
    else 
    {
        v1 = anna_int_unwrap(anna_as_obj_fast(param[0]));
    }
    if(anna_is_int_small(param[1]))
    {
        v2 = &tmp2;
        mpz_init(tmp2);
        mpz_set_si(tmp2, anna_as_int(param[1]));
    }
    else 
    {
        v2 = anna_int_unwrap(anna_as_obj_fast(param[1]));
    }

    mpz_t res;
    mpz_init(res);
    mpz_xor(res, *v1, *v2);
    anna_vmstack_drop(stack, 3);

//    wprintf(L"Perform bignum op bitxor, %s bitxor %s = %s\n", mpz_get_str(0, 10, *v1), mpz_get_str(0, 10, *v2),mpz_get_str(0, 10, res));

    if(mpz_sizeinbase(res, 2)<= ANNA_SMALL_MAX_BIT)
    {
        anna_vmstack_push_int(stack, mpz_get_si(res));
    }
    else{
        anna_vmstack_push_object(stack, anna_int_create_mp(res));
    }

    if(anna_is_int_small(param[0]))
    {
        mpz_clear(tmp1);
    }
    if(anna_is_int_small(param[1]))
    {
        mpz_clear(tmp2);
    }
    mpz_clear(res);

    return stack;
}


static anna_vmstack_t *anna_int_i_exp(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 2;
    if(anna_is_obj(param[1]) && anna_as_obj(param[1])==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push_object(stack, null_object);
        return stack;
    }
    mpz_t tmp1, tmp2;
    mpz_t *v1, *v2;
    if(anna_is_int_small(param[0]))
    {
        v1 = &tmp1;
        mpz_init(tmp1);
        mpz_set_si(tmp1, anna_as_int(param[0]));
    }
    else 
    {
        v1 = anna_int_unwrap(anna_as_obj_fast(param[0]));
    }
    if(anna_is_int_small(param[1]))
    {
        v2 = &tmp2;
        mpz_init(tmp2);
        mpz_set_si(tmp2, anna_as_int(param[1]));
    }
    else 
    {
        v2 = anna_int_unwrap(anna_as_obj_fast(param[1]));
    }

    mpz_t res;
    mpz_init(res);
    mpz_pow_ui(res, *v1, mpz_get_si(*v2));
    anna_vmstack_drop(stack, 3);

//    wprintf(L"Perform bignum op exp, %s exp %s = %s\n", mpz_get_str(0, 10, *v1), mpz_get_str(0, 10, *v2),mpz_get_str(0, 10, res));

    if(mpz_sizeinbase(res, 2)<= ANNA_SMALL_MAX_BIT)
    {
        anna_vmstack_push_int(stack, mpz_get_si(res));
    }
    else{
        anna_vmstack_push_object(stack, anna_int_create_mp(res));
    }

    if(anna_is_int_small(param[0]))
    {
        mpz_clear(tmp1);
    }
    if(anna_is_int_small(param[1]))
    {
        mpz_clear(tmp2);
    }
    mpz_clear(res);

    return stack;
}


static anna_vmstack_t *anna_int_i_shl(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 2;
    if(anna_is_obj(param[1]) && anna_as_obj(param[1])==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push_object(stack, null_object);
        return stack;
    }
    mpz_t tmp1, tmp2;
    mpz_t *v1, *v2;
    if(anna_is_int_small(param[0]))
    {
        v1 = &tmp1;
        mpz_init(tmp1);
        mpz_set_si(tmp1, anna_as_int(param[0]));
    }
    else 
    {
        v1 = anna_int_unwrap(anna_as_obj_fast(param[0]));
    }
    if(anna_is_int_small(param[1]))
    {
        v2 = &tmp2;
        mpz_init(tmp2);
        mpz_set_si(tmp2, anna_as_int(param[1]));
    }
    else 
    {
        v2 = anna_int_unwrap(anna_as_obj_fast(param[1]));
    }

    mpz_t res;
    mpz_init(res);
    long bits = mpz_get_si(*v2); if(bits > 0) mpz_mul_2exp(res, *v1, bits); else mpz_tdiv_q_2exp(res, *v1, -bits);
    anna_vmstack_drop(stack, 3);

//    wprintf(L"Perform bignum op shl, %s shl %s = %s\n", mpz_get_str(0, 10, *v1), mpz_get_str(0, 10, *v2),mpz_get_str(0, 10, res));

    if(mpz_sizeinbase(res, 2)<= ANNA_SMALL_MAX_BIT)
    {
        anna_vmstack_push_int(stack, mpz_get_si(res));
    }
    else{
        anna_vmstack_push_object(stack, anna_int_create_mp(res));
    }

    if(anna_is_int_small(param[0]))
    {
        mpz_clear(tmp1);
    }
    if(anna_is_int_small(param[1]))
    {
        mpz_clear(tmp2);
    }
    mpz_clear(res);

    return stack;
}


static anna_vmstack_t *anna_int_i_shr(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 2;
    if(anna_is_obj(param[1]) && anna_as_obj(param[1])==null_object)
    {
        anna_vmstack_drop(stack, 3);
        anna_vmstack_push_object(stack, null_object);
        return stack;
    }
    mpz_t tmp1, tmp2;
    mpz_t *v1, *v2;
    if(anna_is_int_small(param[0]))
    {
        v1 = &tmp1;
        mpz_init(tmp1);
        mpz_set_si(tmp1, anna_as_int(param[0]));
    }
    else 
    {
        v1 = anna_int_unwrap(anna_as_obj_fast(param[0]));
    }
    if(anna_is_int_small(param[1]))
    {
        v2 = &tmp2;
        mpz_init(tmp2);
        mpz_set_si(tmp2, anna_as_int(param[1]));
    }
    else 
    {
        v2 = anna_int_unwrap(anna_as_obj_fast(param[1]));
    }

    mpz_t res;
    mpz_init(res);
    long bits = mpz_get_si(*v2); if(bits > 0) mpz_tdiv_q_2exp(res, *v1, bits); else mpz_mul_2exp(res, *v1, -bits);
    anna_vmstack_drop(stack, 3);

//    wprintf(L"Perform bignum op shr, %s shr %s = %s\n", mpz_get_str(0, 10, *v1), mpz_get_str(0, 10, *v2),mpz_get_str(0, 10, res));

    if(mpz_sizeinbase(res, 2)<= ANNA_SMALL_MAX_BIT)
    {
        anna_vmstack_push_int(stack, mpz_get_si(res));
    }
    else{
        anna_vmstack_push_object(stack, anna_int_create_mp(res));
    }

    if(anna_is_int_small(param[0]))
    {
        mpz_clear(tmp1);
    }
    if(anna_is_int_small(param[1]))
    {
        mpz_clear(tmp2);
    }
    mpz_clear(res);

    return stack;
}


static anna_vmstack_t *anna_int_i_abs(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 1;
    int v1 = anna_as_int(param[0]);
    anna_vmstack_drop(stack, 2);
    anna_vmstack_push_int(stack, abs(v1));
    return stack;
}


static anna_vmstack_t *anna_int_i_neg(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 1;
    int v1 = anna_as_int(param[0]);
    anna_vmstack_drop(stack, 2);
    anna_vmstack_push_int(stack, -v1);
    return stack;
}


static anna_vmstack_t *anna_int_i_bitnot(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 1;
    int v1 = anna_as_int(param[0]);
    anna_vmstack_drop(stack, 2);
    anna_vmstack_push_int(stack, ~v1);
    return stack;
}


static anna_vmstack_t *anna_int_i_sign(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 1;
    int v1 = anna_as_int(param[0]);
    anna_vmstack_drop(stack, 2);
    anna_vmstack_push_int(stack, v1==0?0:(v1>0?1:-1));
    return stack;
}


static anna_vmstack_t *anna_int_i_nextAssign(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 1;
    int v = anna_as_int(param[0]);
    anna_vmstack_drop(stack, 2);
    anna_vmstack_push_int(stack, v+1);
    return stack;
}


static anna_vmstack_t *anna_int_i_prevAssign(anna_vmstack_t *stack, anna_object_t *me)
{
    anna_entry_t **param = stack->top - 1;
    int v = anna_as_int(param[0]);
    anna_vmstack_drop(stack, 2);
    anna_vmstack_push_int(stack, v-1);
    return stack;
}


static void anna_int_type_i_create(anna_stack_template_t *stack)
{


    anna_type_t *argv[]=
	{
	    int_type, int_type
	}
    ;
    
    wchar_t *argn[]=
	{
	  L"this", L"value"
	}
    ;
    mid_t mmid;
    anna_function_t *fun;

    mmid = anna_native_method_create(
	int_type, -1, L"__add__Int__", 0, 
	&anna_int_i_add, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(int_type, mmid)));
    anna_function_alias_add(fun, L"__add__");


    mmid = anna_native_method_create(
	int_type, -1, L"__increaseAssign__Int__", 0, 
	&anna_int_i_increaseAssign, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(int_type, mmid)));
    anna_function_alias_add(fun, L"__increaseAssign__");


    mmid = anna_native_method_create(
	int_type, -1, L"__sub__Int__", 0, 
	&anna_int_i_sub, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(int_type, mmid)));
    anna_function_alias_add(fun, L"__sub__");


    mmid = anna_native_method_create(
	int_type, -1, L"__decreaseAssign__Int__", 0, 
	&anna_int_i_decreaseAssign, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(int_type, mmid)));
    anna_function_alias_add(fun, L"__decreaseAssign__");


    mmid = anna_native_method_create(
	int_type, -1, L"__mul__Int__", 0, 
	&anna_int_i_mul, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(int_type, mmid)));
    anna_function_alias_add(fun, L"__mul__");


    mmid = anna_native_method_create(
	int_type, -1, L"__div__Int__", 0, 
	&anna_int_i_div, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(int_type, mmid)));
    anna_function_alias_add(fun, L"__div__");


    mmid = anna_native_method_create(
	int_type, -1, L"__mod__Int__", 0, 
	&anna_int_i_mod, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(int_type, mmid)));
    anna_function_alias_add(fun, L"__mod__");


    mmid = anna_native_method_create(
	int_type, -1, L"__bitand__Int__", 0, 
	&anna_int_i_bitand, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(int_type, mmid)));
    anna_function_alias_add(fun, L"__bitand__");


    mmid = anna_native_method_create(
	int_type, -1, L"__bitor__Int__", 0, 
	&anna_int_i_bitor, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(int_type, mmid)));
    anna_function_alias_add(fun, L"__bitor__");


    mmid = anna_native_method_create(
	int_type, -1, L"__bitxor__Int__", 0, 
	&anna_int_i_bitxor, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(int_type, mmid)));
    anna_function_alias_add(fun, L"__bitxor__");


    mmid = anna_native_method_create(
	int_type, -1, L"__exp__Int__", 0, 
	&anna_int_i_exp, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(int_type, mmid)));
    anna_function_alias_add(fun, L"__exp__");


    mmid = anna_native_method_create(
	int_type, -1, L"__shl__Int__", 0, 
	&anna_int_i_shl, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(int_type, mmid)));
    anna_function_alias_add(fun, L"__shl__");


    mmid = anna_native_method_create(
	int_type, -1, L"__shr__Int__", 0, 
	&anna_int_i_shr, 
	int_type,
	2, argv, argn);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(int_type, mmid)));
    anna_function_alias_add(fun, L"__shr__");



    anna_native_method_create(
	int_type, -1, L"__abs__", 0, 
	&anna_int_i_abs, 
	int_type,
	1, argv, argn);

    anna_native_method_create(
	int_type, -1, L"__neg__", 0, 
	&anna_int_i_neg, 
	int_type,
	1, argv, argn);

    anna_native_method_create(
	int_type, -1, L"__bitnot__", 0, 
	&anna_int_i_bitnot, 
	int_type,
	1, argv, argn);

    anna_native_method_create(
	int_type, -1, L"__sign__", 0, 
	&anna_int_i_sign, 
	int_type,
	1, argv, argn);


    anna_native_method_create(
	int_type, -1, L"__nextAssign__", 0, 
	&anna_int_i_nextAssign, 
	int_type,
	1, argv, argn);

    anna_native_method_create(
	int_type, -1, L"__prevAssign__", 0, 
	&anna_int_i_prevAssign, 
	int_type,
	1, argv, argn);

}

