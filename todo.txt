CLEANUP:
Don't differentiate between macros and functions anymore
Move most of stack_templates into the namespace class

KNOWN BUGS:
List, Pair and Hash types are still included in their specialization list even if GC:ed. This should never ever trigger a bug, since if the type has been GC:ed it can't ever be used again, but it does seem unsightly...
hash type does not support continuations
anna_type_member_count is probably used in a bunch of places where it returns the wrong number 
Numeric locale hard coded to C
Return type calculations don't take into account return expressions other than the last expression.
Implicit specialization doesn't work on user defined types
A property with no setter can be set, resulting in run time crash

LANGUAGE FEATURES:
Function templates
Modules should map to directories, not files
Submodules
Default function argumet values. These also need to be part of the function interface and contained in function keys.
Int should just be an interface, with two backing implementations
continue/break (continue is easy with a continuation, but implementing break requires some special hacking. A macro could do it, but it would be a bit ugly)
No magic toString method, use attributes to specify methods for implicit conversion
Static members of a type should be available without an instance of that type. Preferably through Type.name
Return value type for continuations

STDLIB FEATURES:
HTML documentation extractor
The rest of the hashtable functions (filter, contains, properties for keys and values, etc)
Set type
String format function
File type
toString methods for Hash, Pair
A backtrace function
io module
time module
List.milter 
Range.{milter,map,filter,first,last,find}

RELIABILITY:
Use continuations to make a green thread implementation as a test of continuation functionality
Validate that all functions end with an empty stack frame
Tests for namespaces
Tests for nested macro members
Tests for complex math
Tests for floating point math
Tests for type checking on invalid specialization
Test return types of complex expression types, e.g. if(){}+1.
Current method for determening map output is a bit fragile. 

DOCUMENTATION:
Document all vm ops w.r.t. manipulating the stack, etc.

PERFORMANCE:
Mandel test should be no more than one order of magnitude slower than the corresponding C implementation
Start implementing a few of the language benchmark game tests to compare performance against various other languages. It should be possible to make Anna roughly comparable to Python in performance.
Variable lookup instruction version for looking up in current frame
Variable lookup instruction version for looking up in parent frame
Special purpose bytecode instructions for arithmetic on common artithmetic types (int, float, complex)
Implement tail recursion
Avoid creating trampolines when possible - push other stack onto call stack and have special case instruction for call with stack-on-stack. This would require that the gc knows that non-objects might be living on the stack...
Perform escape analysis on stack frames and allocate ones who are never referenced in non-GC:ed memory.
Add profiling information to the VM
Inlining of if/while bodies into main method
Make a version of the fold op that takes a count parameter
Every member declaration also results in a stack template declaration because all members are also part of the stack. This further adds to the argument that we should nix stack_template_t. 

UNUSED OPERATORS:
Currently, the ? and @ symbols are unused. 

PLANS FOR APPS WRITTEN IN ANNA:
Documentation generator: Introspect all data types and generate html documentation on them.
live: Debug a running application using command line or web browser.
Compiler front end.
Asynchronous continuation based app/web server
Simple car game using my terrain rendering engine

