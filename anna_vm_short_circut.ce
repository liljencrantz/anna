
/*
  WARNING! This file is automatically generated by the make_anna_vm_short_circut.sh script.
  Do not edit it directly, your changes will be overwritten!
*/

    
  ANNA_LAB_BITAND_INT:
    {
//            wprintf(L"BITAND\n");
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
	    int res = anna_as_int(i1) & anna_as_int(i2);
            anna_vmstack_push_int(stack, (long)res);
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
  //          wprintf(L"Fallback for int BITAND \n");
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_BITAND_INT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_BITOR_INT:
    {
//            wprintf(L"BITOR\n");
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
	    int res = anna_as_int(i1) | anna_as_int(i2);
            anna_vmstack_push_int(stack, (long)res);
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
  //          wprintf(L"Fallback for int BITOR \n");
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_BITOR_INT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_BITXOR_INT:
    {
//            wprintf(L"BITXOR\n");
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
	    int res = anna_as_int(i1) ^ anna_as_int(i2);
            anna_vmstack_push_int(stack, (long)res);
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
  //          wprintf(L"Fallback for int BITXOR \n");
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_BITXOR_INT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_ADD_INT:
    {
//            wprintf(L"ADD\n");
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
	    int res = anna_as_int(i1) + anna_as_int(i2);

//            wprintf(L"Fasttrack for int ADD %d + %d => %d\n", anna_as_int(i1), anna_as_int(i2), res);

            if(likely(abs(res)<=ANNA_INT_FAST_MAX))
  	        anna_vmstack_push_int(stack, (long)res);
            else
	    {
                //wprintf(L"Moving to slow track with %d + %d => %d\n", anna_as_int(i1), anna_as_int(i2), res);
  	        anna_vmstack_push_object(stack, anna_int_create(res));
            }
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
  //          wprintf(L"Fallback for int ADD \n");
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_ADD_INT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_SUB_INT:
    {
//            wprintf(L"SUB\n");
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
	    int res = anna_as_int(i1) - anna_as_int(i2);

//            wprintf(L"Fasttrack for int SUB %d - %d => %d\n", anna_as_int(i1), anna_as_int(i2), res);

            if(likely(abs(res)<=ANNA_INT_FAST_MAX))
  	        anna_vmstack_push_int(stack, (long)res);
            else
	    {
                //wprintf(L"Moving to slow track with %d - %d => %d\n", anna_as_int(i1), anna_as_int(i2), res);
  	        anna_vmstack_push_object(stack, anna_int_create(res));
            }
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
  //          wprintf(L"Fallback for int SUB \n");
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_SUB_INT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_INCREASE_ASSIGN_INT:
    {
//            wprintf(L"INCREASE_ASSIGN\n");
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
	    int res = anna_as_int(i1) + anna_as_int(i2);

//            wprintf(L"Fasttrack for int INCREASE_ASSIGN %d + %d => %d\n", anna_as_int(i1), anna_as_int(i2), res);

            if(likely(abs(res)<=ANNA_INT_FAST_MAX))
  	        anna_vmstack_push_int(stack, (long)res);
            else
	    {
                //wprintf(L"Moving to slow track with %d + %d => %d\n", anna_as_int(i1), anna_as_int(i2), res);
  	        anna_vmstack_push_object(stack, anna_int_create(res));
            }
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
  //          wprintf(L"Fallback for int INCREASE_ASSIGN \n");
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_INCREASE_ASSIGN_INT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_DECREASE_ASSIGN_INT:
    {
//            wprintf(L"DECREASE_ASSIGN\n");
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
	    int res = anna_as_int(i1) - anna_as_int(i2);

//            wprintf(L"Fasttrack for int DECREASE_ASSIGN %d - %d => %d\n", anna_as_int(i1), anna_as_int(i2), res);

            if(likely(abs(res)<=ANNA_INT_FAST_MAX))
  	        anna_vmstack_push_int(stack, (long)res);
            else
	    {
                //wprintf(L"Moving to slow track with %d - %d => %d\n", anna_as_int(i1), anna_as_int(i2), res);
  	        anna_vmstack_push_object(stack, anna_int_create(res));
            }
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
  //          wprintf(L"Fallback for int DECREASE_ASSIGN \n");
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_DECREASE_ASSIGN_INT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_EQ_INT:
    {
//            wprintf(L"EQ\n");
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
//            wprintf(L"Fasttrack for int EQ %d == %d => %d\n",
//anna_as_int(i1), anna_as_int(i2),(anna_as_int(i1) == anna_as_int(i2)));
            anna_vmstack_push_entry(stack, (anna_as_int(i1) == anna_as_int(i2))?anna_from_int(1):anna_from_obj(null_object));
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//                wprintf(L"Fallback for int EQ \n");
//                wprintf(L"%d %d %ls\n", o1, anna_is_obj(i1), o1->type->name);
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_EQ];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
//            wprintf(L"Next instruction is %d!\n", *stack->code);
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_NEQ_INT:
    {
//            wprintf(L"NEQ\n");
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
//            wprintf(L"Fasttrack for int NEQ %d != %d => %d\n",
//anna_as_int(i1), anna_as_int(i2),(anna_as_int(i1) != anna_as_int(i2)));
            anna_vmstack_push_entry(stack, (anna_as_int(i1) != anna_as_int(i2))?anna_from_int(1):anna_from_obj(null_object));
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//                wprintf(L"Fallback for int NEQ \n");
//                wprintf(L"%d %d %ls\n", o1, anna_is_obj(i1), o1->type->name);
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_NEQ];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
//            wprintf(L"Next instruction is %d!\n", *stack->code);
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_LT_INT:
    {
//            wprintf(L"LT\n");
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
//            wprintf(L"Fasttrack for int LT %d < %d => %d\n",
//anna_as_int(i1), anna_as_int(i2),(anna_as_int(i1) < anna_as_int(i2)));
            anna_vmstack_push_entry(stack, (anna_as_int(i1) < anna_as_int(i2))?anna_from_int(1):anna_from_obj(null_object));
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//                wprintf(L"Fallback for int LT \n");
//                wprintf(L"%d %d %ls\n", o1, anna_is_obj(i1), o1->type->name);
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_LT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
//            wprintf(L"Next instruction is %d!\n", *stack->code);
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_LTE_INT:
    {
//            wprintf(L"LTE\n");
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
//            wprintf(L"Fasttrack for int LTE %d <= %d => %d\n",
//anna_as_int(i1), anna_as_int(i2),(anna_as_int(i1) <= anna_as_int(i2)));
            anna_vmstack_push_entry(stack, (anna_as_int(i1) <= anna_as_int(i2))?anna_from_int(1):anna_from_obj(null_object));
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//                wprintf(L"Fallback for int LTE \n");
//                wprintf(L"%d %d %ls\n", o1, anna_is_obj(i1), o1->type->name);
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_LTE];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
//            wprintf(L"Next instruction is %d!\n", *stack->code);
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_GT_INT:
    {
//            wprintf(L"GT\n");
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
//            wprintf(L"Fasttrack for int GT %d > %d => %d\n",
//anna_as_int(i1), anna_as_int(i2),(anna_as_int(i1) > anna_as_int(i2)));
            anna_vmstack_push_entry(stack, (anna_as_int(i1) > anna_as_int(i2))?anna_from_int(1):anna_from_obj(null_object));
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//                wprintf(L"Fallback for int GT \n");
//                wprintf(L"%d %d %ls\n", o1, anna_is_obj(i1), o1->type->name);
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_GT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
//            wprintf(L"Next instruction is %d!\n", *stack->code);
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_GTE_INT:
    {
//            wprintf(L"GTE\n");
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
//            wprintf(L"Fasttrack for int GTE %d >= %d => %d\n",
//anna_as_int(i1), anna_as_int(i2),(anna_as_int(i1) >= anna_as_int(i2)));
            anna_vmstack_push_entry(stack, (anna_as_int(i1) >= anna_as_int(i2))?anna_from_int(1):anna_from_obj(null_object));
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//                wprintf(L"Fallback for int GTE \n");
//                wprintf(L"%d %d %ls\n", o1, anna_is_obj(i1), o1->type->name);
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_GTE];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
//            wprintf(L"Next instruction is %d!\n", *stack->code);
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_DIV_INT:
    {
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
//wprintf(L"DIV\n");
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
	    int res = anna_as_int(i1) / anna_as_int(i2);
            anna_vmstack_push_int(stack, (long)res);
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
          //  wprintf(L"Fallback for int DIV \n");
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_DIV_INT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	stack->code += sizeof(anna_op_null_t);
	goto *jump_label[(int)*stack->code];
    }

  ANNA_LAB_MUL_INT:
    {
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
//wprintf(L"MUL\n");
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_int_small(i1) && anna_is_int_small(i2)))
	{
	    long long res = (long long)anna_as_int(i1) * anna_as_int(i2);
//wprintf(L"FAST %d * %d = %lld, %d\n", anna_as_int(i1), anna_as_int(i2), res, ANNA_INT_FAST_MAX);

            if(likely(llabs(res)<=ANNA_INT_FAST_MAX))
            {
//assert(anna_as_int(anna_from_int(res)) == res);
  	        anna_vmstack_push_int(stack, (long)res);
            }
            else
            {
//wprintf(L"OVERFLOW\n");
                mpz_t m1, m2, res2;
                mpz_init(m1);
                mpz_init(m2);
                mpz_init(res2);
                mpz_set_si(m1, anna_as_int(i1));
                mpz_set_si(m2, anna_as_int(i2));
    
                mpz_mul(res2, m1, m2);
                
                //wprintf(L"Perform bignum op mul, %s mul %s = %s\n", mpz_get_str(0, 10, m1), mpz_get_str(0, 10, m2),mpz_get_str(0, 10, res2));

  	        anna_vmstack_push_object(stack, anna_int_create_mp(res2));
                mpz_clear(m1);
                mpz_clear(m2);
                mpz_clear(res2);
            }
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
          //  wprintf(L"Fallback for int MUL \n");
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_MUL_INT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_ADD_FLOAT:
    {
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_float(i1) && anna_is_float(i2)))
	{
            double v1 = anna_as_float(i1);
            double v2 = anna_as_float(i2);
	    anna_vmstack_push_float(stack, v1 + v2);
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//            wprintf(L"Fallback for float ADD %d %d %f %f\n", anna_is_alloc(i1), anna_is_alloc(i2), anna_as_float(i1), anna_as_float(i2));
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_ADD_FLOAT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_SUB_FLOAT:
    {
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_float(i1) && anna_is_float(i2)))
	{
            double v1 = anna_as_float(i1);
            double v2 = anna_as_float(i2);
	    anna_vmstack_push_float(stack, v1 - v2);
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//            wprintf(L"Fallback for float SUB %d %d %f %f\n", anna_is_alloc(i1), anna_is_alloc(i2), anna_as_float(i1), anna_as_float(i2));
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_SUB_FLOAT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_INCREASE_ASSIGN_FLOAT:
    {
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_float(i1) && anna_is_float(i2)))
	{
            double v1 = anna_as_float(i1);
            double v2 = anna_as_float(i2);
	    anna_vmstack_push_float(stack, v1 + v2);
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//            wprintf(L"Fallback for float INCREASE_ASSIGN %d %d %f %f\n", anna_is_alloc(i1), anna_is_alloc(i2), anna_as_float(i1), anna_as_float(i2));
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_INCREASE_ASSIGN_FLOAT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_DECREASE_ASSIGN_FLOAT:
    {
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_float(i1) && anna_is_float(i2)))
	{
            double v1 = anna_as_float(i1);
            double v2 = anna_as_float(i2);
	    anna_vmstack_push_float(stack, v1 - v2);
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//            wprintf(L"Fallback for float DECREASE_ASSIGN %d %d %f %f\n", anna_is_alloc(i1), anna_is_alloc(i2), anna_as_float(i1), anna_as_float(i2));
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_DECREASE_ASSIGN_FLOAT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_MUL_FLOAT:
    {
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_float(i1) && anna_is_float(i2)))
	{
            double v1 = anna_as_float(i1);
            double v2 = anna_as_float(i2);
	    anna_vmstack_push_float(stack, v1 * v2);
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//            wprintf(L"Fallback for float MUL %d %d %f %f\n", anna_is_alloc(i1), anna_is_alloc(i2), anna_as_float(i1), anna_as_float(i2));
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_MUL_FLOAT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_DIV_FLOAT:
    {
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_float(i1) && anna_is_float(i2)))
	{
            double v1 = anna_as_float(i1);
            double v2 = anna_as_float(i2);
	    anna_vmstack_push_float(stack, v1 / v2);
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//            wprintf(L"Fallback for float DIV %d %d %f %f\n", anna_is_alloc(i1), anna_is_alloc(i2), anna_as_float(i1), anna_as_float(i2));
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_DIV_FLOAT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

    
  ANNA_LAB_EXP_FLOAT:
    {
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	stack->code += sizeof(anna_op_null_t);
	if(likely(anna_is_float(i1) && anna_is_float(i2)))
	{
            double v1 = anna_as_float(i1);
            double v2 = anna_as_float(i2);
	    anna_vmstack_push_float(stack, pow(v1, v2));
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//            wprintf(L"Fallback for float EXP %d %d %f %f\n", anna_is_alloc(i1), anna_is_alloc(i2), anna_as_float(i1), anna_as_float(i2));
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_EXP_FLOAT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	goto *jump_label[(int)*stack->code];
    }

