attribute(internal, doc("Internal module for the __collcetion__ macro."));

macro __collection__(node)
(
    doc("
Handle a collection literal and turn it into a call to either
MutableList or HashMap. If the collection arguments are mappings, the
collection becomes a HashMap. If there is a template specialization
with two arguments, the collection becomes a HashMap. Otherwise, it
becomes a MutableList.")
)
{
    res := Call(node, ?);
    spec := node[0] as Call;
    if(
	(!spec and node.count > 1 and 
	    ((node[1] as Call).function as Identifier).name == "__mapping__") or 
	spec.count == 2)
    {
	res.function = Dummy(node, HashMap);
	node[Range(1, ?, 1)].each(childNode)
	{
  	    childCall := childNode as Call;
	    if(!((childCall.function as Identifier).name == "__mapping__"))
	    {
		childNode.error("Not a key/value pair");
		return NullLiteral(node);
	    }
	    childCall.function = Dummy(childNode, Pair);
	}
    }
    else
    {
	res.function = Dummy(node, MutableList);
    }
    res ~= node[Range(1, ?, 1)];
    
    if(spec)
    {
	res.function = Call(node, Identifier(node[0], "__specialize__"), res.function, spec);
    }
    return res;
}

