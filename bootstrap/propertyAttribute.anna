attribute(internal, doc("Internal module for the propertyAttribute macro."));

use(parser);

def Call getAttributePayload(Call c)
    (doc("Internal helper function for <a member='propertyAttribute'>propertyAttribute</a>. Don't use directly."), internal){
    expandCode(
	if(c.callTo?(%name)) { return c },
	name: ["__constInternal__", "__varInternal__", "__typeInternal__", "__defInternal"]);
    if(c.count == 1 and c[0] as Call){
	return getAttributePayload(c[0] as Call);
    }
    return ?
}

macro propertyAttribute(node)
    (doc(
	"The property member attribute is used for creating dynamically caclulated members that behave like regular member variables.",
	"Properties are internally implemented using a pair of methods called a getter and a setter. The setter is used in place of variable assignment, and the getter is used in place of variable value lookup.",
	"A simple example of defining a property with both a getter and a setter",
	"
<pre class='anna-code'>
class MyClass{
    var Int storage;

    def myGetter(){
        this.storage;
    }

    def mySetter(Int val){
        this.storage = -val;
    }

    var Int myProperty (property(myGetter, mySetter));
}
</pre>",
	"If one wants to define a read only-property, one can instead write",
	"
<pre class='anna-code'>
class MyClass{
    var Int storage;

    def myProperty() (property){
        this.storage;
    }
}
</pre>",
	)){
    payload := getAttributePayload(node);
    if(payload.callTo?("__constInternal__")){
        decl := payload as Call;
	if(decl[2].callTo?("__def__")){
	    getter := decl[2] as Call;
	    propType := if(type(getter[1]) != NullLiteral){getter[1]} else {ast(__staticReturnTypeOf__(%fun)) % ["fun": decl[2]];}
	    propName := (decl[0] as Identifier).name;
            getterName := "!" ~ propName ~ "Getter";
	    getter[0] = Identifier(getter[0], getterName);
	    decl[0] = Identifier(decl[0], getterName);
	    attr := decl[3] as Call;
  	    doc := (attr.filterByCall("doc")[0] as StringLiteral).payload or "";
	    decl[3] = ast({bound, doc(%doc)}) % ["doc": StringLiteral(attr, "Automatically generated getter method for the % property. For internal use only." % [propName])];
	    propDecl := ast(var %Type %name (property(%getterName), doc(%doc))) % [
		"Type": propType,
		"name": Identifier(node, propName),
		"getterName": Identifier(node, getterName),
		"doc": StringLiteral(attr, doc),
		];

	    res := ast(nothing(%property, %getter)) % [
		"property": propDecl,
		"getter": node[0] ];
	    return res;
	}
    }
    return node[0];
}
