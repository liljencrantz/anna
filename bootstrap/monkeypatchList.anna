attribute(internal, doc("Internally used module. Don't use directly."));

def listToString(List this)
(
    target(List),
    name(toString),
    doc("Returns a string representation of this List."),
)
{
    return "[" ~ ", ".join(this.map(value){String::convert(value) or "null";}) ~ "]";
}

def all?(List this)
(
    target(List),
    doc("Returns true if all members of this list are non-Null."),
)
{
    res := 1 as Object;
    this.each(i){ res = res and i }
    return res;
}

def none?(List this)
(
    target(List),
    doc("Returns true if none of the members of this list are non-Null."),
)
{
    res := 1 as Object;
    this.each(i){ res = res and !i }
    return res;
}

def any?(List this)
(
    target(List),
    doc("Returns true if any of the members of this list are non-Null."),
)
{
    return !none?(this);
}

def Int partition(
    MutableList list, Int from, Int to, 
    def Int fun(Object first, Object second))
{
    piv := list[to-1];
    store := from;
    (from .. to-1).each(idx)
    {
	if(fun(list[idx], piv) < 0)
	{
	    tmp := list[idx];
	    list[idx] = list[store];
	    list[store] = tmp;
	    store++;
	}
    }

    tmp2 := list[store];
    list[store] = list[to-1];
    list[to-1] = tmp2;
    
    return store;
}

def Object sortSub(
    MutableList list, Int from, Int to, 
    def Int fun(Object first, Object second))
{
    pivotIdx := partition(list, from, to, fun);
    if(from != pivotIdx)
    {
	sortSub(list, from, pivotIdx, fun);
    }
    if((pivotIdx+1) != to)
    {
        sortSub(list, pivotIdx+1, to, fun);    
    }
}

def MutableList sort(List this, def Int fun(Object first, Object second) = ?)
(
    target(List),
    doc("
Sort the list. If the original list is mutable, it is sorted inplace, otherwise
a new list is returned.",

	"
The current implementation is just a placeholder. It is a standard
Quicksort with a non-random pivot, meaning it does not provide a
stable sort, and it is easy to trigger O(N^2) worst case behavior by
choosing the right input. Also, the current implementation does not 
support templating, so the returned, sorted list is simply a list of 
objects.")
)
{
    list := this.thaw;
    this.empty? and (return list);
    sortSub(
        list, 0, list.count, 
	fun or (def Int(Object first, Object second){first.__cmp__(second)}));
    return list;
}
