attribute(internal, doc("Internally used module. Don't use directly."))

expandCode(
    def %name(%Type this) (
	target(%Type),
	name(toString),
	doc("Returns a string representation of this List."),
	){
	return "[" ~ ", ".join(this.map(value){String::convert(value) or "null"}) ~ "]"
    },
    Type: [ImutableList, MutableList, List],
    name: [toStringImutable, toStringMutable, toStringAny],
    )



expandCode(
    def Any %name(%Type this) (
	target(%Type),
	doc("Returns true if all members of this list are non-Null."),
	name(all?)
	){
	res := 1 as Any
	this.each(i){ res = res and i }
	return res
    },
    Type: [ImutableList, MutableList, List],
    name: [allImutable, allMutable, allAny],
    )


expandCode(
    def %name(%Type this) (
	target(%Type),
	doc("Returns true if none of the members of this list are non-Null."),
	name(none?),
	){
	res := 1 as Any
	this.each(i){ res = res and !i }
	return res
    },
    Type: [ImutableList, MutableList, List],
    name: [noneImutable, noneMutable, noneAny],
    )


expandCode(
    def %name(%Type this) (
	target(%Type),
	doc("Returns true if any of the members of this list are non-Null."),
	name(any?),
	){
	return !%noneName(this)
    },
    Type: [ImutableList, MutableList, List],
    name: [anyImutable, anyMutable, anyAny],
    noneName: [noneImutable, noneMutable, noneAny],
    )

expandCode(
    def Int %name(%Type«%Value» this, %Value value) (
	target(%Type),
	doc("Returns the index of the first location of the specified item in the list."),
	template(%Value:monkeypatchMisc.Comparable),
	name(indexOf),
	){
	this.each(idx, el){
	    if((el as monkeypatchMisc.Comparable).__cmp__(value) == 0){
		return idx
	    }
	}
	return ?
    },
    Type: [ImutableList, MutableList, List],
    name: [indexOfImutable, indexOfMutable, indexOf],
    )
