
def Int search__Char__(
    String this, Char ch)
(
    alias(search),
    target(String),
    documentation("Search for the specified Character in the specified string. Returns the offset of the first occurance of the character if found, null otherwise."),
)
{
    this.each(idx, i){if(i == ch){return idx}}
    return ?;
}

def String __format__List__(
    String this, 
    List«Object» data) 
(
    alias(__format__), 
    target(String), 
    documentation(
	"String formating. Replaces each % character found in the format string with the corresponding object from the list of parameters.", 
	"Note that this formating function is significantly simpler than e.g. the C printf function, as it only deals with replacing placeholders with strings, and not with e.g. numeric conversion. Use the various String::format functions for e.g. numeric formating."),
)
{
    res := "";
    listIdx := 0;
    i := 0;
    while(i < this.count)
    {
        ch := this[i];
        if(ch == '%')
        {
	    if(this[i+1] == '%')
            {
  	        i++;
                res ~= '%'
            } else {
                res ~= data[listIdx];
                listIdx++;
            }
        } else
        {
	    res ~= ch;
        }
        i++;
    }
    return res;
}

def String __format__Map__(
    String this, 
    HashMap«String, Object» data) 
(
    alias(__format__), 
    target(String), 
    documentation(
	"String formating. Replaces each %(NAME) token found in the format string with the corresponding object from the map of named parameters.", 
	"Note that this formating function is significantly simpler than e.g. the C printf function, as it only deals with replacing placeholders with strings, and not with e.g. numeric conversion. Use the various format functions for e.g. numeric formating, such as Int::format."),
)
{
    res := "".thaw;
    i := 0;
    while(i < this.count)
    {
        ch := this[i];
        if(ch == '%')
        {
	    if(this[i+1] == '%')
            {
  	        i++;
                res ~= '%'
            } else {
	        i++;
		if(this[i] == '(')
		{
		    i++;
		    end := search__Char__(this[i...], ')');
		    if(end)
		    {
		        name := this[i..(i+end)];
			res ~= data[name];
			i=i+end;
		    } else {
			// ERROR
		    }
		} else
		{
		    // ERROR
		}
            }
        } else
        {
	    res ~= ch;
        }
        i++;
    }
    return res;
}

def String __filter__(
    String this, 
    def Object body(Int idx, Char value) )
(
    target(String), 
    documentation("Runs the specified test on each character in the string, and return a new string with the characters for which the test returned null removed."),
)
{
    res := "";
    this.each(key, value){if(body(key, value)){res ~= value;}}
    return res;
}

def String lpad(
    String this,
    Int count,
    Char char = ' ')
(
    target(String),
    documentation("Pad the left side of this string with the specified character up to a minimum of the specified number of characters"),
)
{
    if(this.count > count)
    {
	return this;
    }
    res := "";
    (0..(count - this.count)).each(i)
    {
	res ~= char;
    }
    res ~= this;
    return res;
}

def String rpad(
    String this,
    Int count,
    Char char = ' ')
(
    target(String),
    documentation("Pad the right side of this string with the specified character up to a minimum of the specified number of characters"),
)
{
    if(this.count > count)
    {
	return this;
    }
    res := "" ~ this;
    (0..(count - this.count)).each(i)
    {
	res ~= char;
    }
    return res;
}

def MutableList«String» split(
    String this,
    Char char,
    Object allowEmpty = 1)
(
    target(String),
    documentation("Split this string on every occurence of the specified character and return the resulting array of Strings. If allowEmpty is null, empty strings will be ignored."),
)
{
    res := «String»[];
    start := 0;
    stop := 0;
    while(stop <= this.count)
    {
	while(stop < this.count and this[stop] != char)
	{
	    stop++;
	}
	if(allowEmpty or stop > start)
	{
	    res ~= [this[start..stop]];
	}
	stop = start = stop + 1;
    }
    return res;
}

