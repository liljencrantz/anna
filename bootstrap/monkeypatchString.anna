attribute(internal, doc("Internally used module. Don't use directly."));

def Int searchCharImutable(
    ImutableString this, Char ch, Int from=0)
(
    alias(search),
    name(searchChar),
    target(ImutableString),
    doc(
	"Search for the specified Character in the specified string. Returns the offset of the first occurance of the character if found, null otherwise.",
	"This method is currently rather inefficient.",
	),
)
{
    return searchChar(this, ch, from);
}

def Int searchCharMutable(
    MutableString this, Char ch, Int from=0)
(
    alias(search),
    name(searchChar),
    target(MutableString),
    doc(
	"Search for the specified Character in the specified string. Returns the offset of the first occurance of the character if found, null otherwise.",
	"This method is currently rather inefficient.",
	),
)
{
    return searchChar(this, ch, from);
}

def Int searchChar(
    String this, Char ch, Int from=0)
(
    alias(search),
    target(String),
    doc(
	"Search for the specified Character in the specified string. Returns the offset of the first occurance of the character if found, null otherwise.",
	"This method is currently rather inefficient.",
	),
)
{
    this[from...].each(idx, i){if(i == ch){return idx}}
    return ?;
}

def Int searchStringMutable(
    MutableString this, String string, Int from = 0)
(
    alias(search),
    name(searchString),
    target(MutableString),
    doc("Search for the specified Substring in the specified string. Returns the offset of the first occurance of the character if found, null otherwise.",
	"This method is currently rather inefficient.",
	),
)
{
    return searchString(this, string, from);
}

def Int searchStringImutable(
    ImutableString this, String string, Int from = 0)
(
    alias(search),
    name(searchString),
    target(ImutableString),
    doc("Search for the specified Substring in the specified string. Returns the offset of the first occurance of the character if found, null otherwise.",
	"This method is currently rather inefficient.",
	),
)
{
    return searchString(this, string, from);
}

def Int searchString(
    String this, String string, Int from = 0)
(
    alias(search),
    target(String),
    doc("Search for the specified Substring in the specified string. Returns the offset of the first occurance of the character if found, null otherwise.",
	"This method is currently rather inefficient.",
	),
)
{
    (from..this.count).each(idx){if(this[idx..(idx+string.count)] == string){return idx}}
    return ?;
}

def ImutableString formatListImutable(
    ImutableString this, 
    List«Object» data) 
(
    alias(__format__), 
    name(formatList),
    target(ImutableString), 
    doc(
	"String formating. Replaces each % character found in the format string with the corresponding object from the list of parameters.", 
	"Note that this formating function is significantly simpler than e.g. the C printf function, as it only deals with replacing placeholders with strings, and not with e.g. numeric conversion. Use the various String::format functions for e.g. numeric formating."
	),
)
{
    return formatList(this, data).freeze;
}

def MutableString formatListMutable(
    MutableString this, 
    List«Object» data) 
(
    alias(__format__), 
    name(formatList),
    target(MutableString), 
    doc(
	"String formating. Replaces each % character found in the format string with the corresponding object from the list of parameters.", 
	"Note that this formating function is significantly simpler than e.g. the C printf function, as it only deals with replacing placeholders with strings, and not with e.g. numeric conversion. Use the various String::format functions for e.g. numeric formating."
	),
)
{
    return formatList(this, data).thaw;
}

def String formatList(
    String this, 
    List«Object» data) 
(
    alias(__format__), 
    target(String), 
    doc(
	"String formating. Replaces each % character found in the format string with the corresponding object from the list of parameters.", 
	"Note that this formating function is significantly simpler than e.g. the C printf function, as it only deals with replacing placeholders with strings, and not with e.g. numeric conversion. Use the various String::format functions for e.g. numeric formating."
	),
)
{
    res := "";
    listIdx := 0;
    i := 0;
    while(i < this.count)
    {
        ch := this[i];
        if(ch == '%')
        {
	    if(this[i+1] == '%')
            {
  	        i++;
                res ~= '%'
            } 
	    else 
	    {
                res ~= (data[listIdx] or "");
                listIdx++;
            }
        } 
	else
        {
	    res ~= ch;
        }
        i++;
    }
    return res;
}

def ImutableString formatMapImutable(
    ImutableString this, 
    HashMap«String, Object» data) 
(
    alias(__format__), 
    name(formatMap),
    target(ImutableString), 
    doc(
	"String formating. Replaces each %(NAME) token found in the format string with the corresponding object from the map of named parameters.", 
	"Note that this formating function is significantly simpler than e.g. the C printf function, as it only deals with replacing placeholders with strings, and not with e.g. numeric conversion. Use the various format functions for e.g. numeric formating, such as Int::format."),
    )
{
    return formatMap(this, data).freeze;
}

def MutableString formatMapMutable(
    MutableString this, 
    HashMap«String, Object» data) 
(
    alias(__format__), 
    name(formatMap),
    target(MutableString), 
    doc(
	"String formating. Replaces each %(NAME) token found in the format string with the corresponding object from the map of named parameters.", 
	"Note that this formating function is significantly simpler than e.g. the C printf function, as it only deals with replacing placeholders with strings, and not with e.g. numeric conversion. Use the various format functions for e.g. numeric formating, such as Int::format."),
    )
{
    return formatMap(this, data).thaw;
}

def String formatMap(
    String this, 
    HashMap«String, Object» data) 
(
    alias(__format__), 
    target(String), 
    doc(
	"String formating. Replaces each %(NAME) token found in the format string with the corresponding object from the map of named parameters.", 
	"Note that this formating function is significantly simpler than e.g. the C printf function, as it only deals with replacing placeholders with strings, and not with e.g. numeric conversion. Use the various format functions for e.g. numeric formating, such as Int::format."),
    )
{
    res := "".thaw;
    i := 0;
    while(i < this.count)
    {
        ch := this[i];
        if(ch == '%')
        {
	    if(this[i+1] == '%')
            {
  	        i++;
                res ~= '%'
            } 
	    else
	    {
	        i++;
		if(this[i] == '(')
		{
		    i++;
		    end := searchChar(this[i...], ')');
		    if(end)
		    {
		        name := this[i..(i+end)];
			res ~= data[name];
			i=i+end;
		    } 
		    else 
		    {
			// ERROR
		    }
		} 
		else
		{
		    // ERROR
		}
            }
        } 
	else
        {
	    res ~= ch;
        }
        i++;
    }
    return res;
}

def MutableString filterMutable(
    MutableString this, 
    def Object body(Int idx, Char value) )
(
    target(MutableString), 
    name(filter),
    doc("Runs the specified test on each character in the string, and return a new string with the characters for which the test returned null removed."),
)
{
    return filter(this, body).thaw;
}

def ImutableString filterImutable(
    ImutableString this, 
    def Object body(Int idx, Char value) )
(
    target(ImutableString), 
    name(filter),
    doc("Runs the specified test on each character in the string, and return a new string with the characters for which the test returned null removed."),
)
{
    return filter(this, body).freeze;
}

def String filter(
    String this, 
    def Object body(Int idx, Char value) )
(
    target(String), 
    doc("Runs the specified test on each character in the string, and return a new string with the characters for which the test returned null removed."),
)
{
    res := "";
    this.each(key, value){if(body(key, value)){res ~= value;}}
    return res;
}

def MutableString lpadMutable(
    MutableString this,
    Int count,
    Char char = ' ')
(
    target(MutableString),
    name(lpad),
    doc("Pad the left side of this string with the specified character up to a minimum of the specified number of characters"),
)
{
    return lpad(this, count, char).thaw;
}

def ImutableString lpadImutable(
    ImutableString this,
    Int count,
    Char char = ' ')
(
    target(ImutableString),
    name(lpad),
    doc("Pad the left side of this string with the specified character up to a minimum of the specified number of characters"),
)
{
    return lpad(this, count, char).freeze;
}

def String lpad(
    String this,
    Int count,
    Char char = ' ')
(
    target(String),
    doc("Pad the left side of this string with the specified character up to a minimum of the specified number of characters"),
)
{
    if(this.count > count)
    {
	return this;
    }
    res := "";
    (0..(count - this.count)).each(i)
    {
	res ~= char;
    }
    res ~= this;
    return res;
}

def MutableString rpadMutable(
    MutableString this,
    Int count,
    Char char = ' ')
(
    target(MutableString),
    name(rpad),
    doc("Pad the left side of this string with the specified character up to a minimum of the specified number of characters"),
)
{
    return rpad(this, count, char).thaw;
}

def ImutableString rpadImutable(
    ImutableString this,
    Int count,
    Char char = ' ')
(
    target(ImutableString),
    name(rpad),
    doc("Pad the left side of this string with the specified character up to a minimum of the specified number of characters"),
)
{
    return rpad(this, count, char).freeze;
}

def String rpad(
    String this,
    Int count,
    Char char = ' ')
(
    target(String),
    doc("Pad the right side of this string with the specified character up to a minimum of the specified number of characters"),
)
{
    if(this.count > count)
    {
	return this;
    }
    res := "" ~ this;
    (0..(count - this.count)).each(i)
    {
	res ~= char;
    }
    return res;
}

def Int __in__Mutable(MutableString this, Char char)
(
    name(__in__),
    target(MutableString),
)
{
    return __in__(this, char);
}

def Int __in__Imutable(ImutableString this, Char char)
(
    name(__in__),
    target(ImutableString)
)
{
    return __in__(this, char);
}

def Int __in__(String this, Char char)
(
    target(String)
)
{
    this.each(idx, ch)
    {
	if(char == ch)
	{
	    return idx;
	}
    }
    return ?;
}

def MutableList«String» splitMutable(
    ImutableString this,
    String charList,
    Object allowEmpty = 1)
(
    target(ImutableString),
    name(split),
    doc("Split this string on every occurence of the specified characters and return the resulting array of Strings. If allowEmpty is null, empty strings will be ignored."),
)
{
    return split(
	this, charList, allowEmpty);
}

def MutableList«String» splitImutable(
    MutableString this,
    String charList,
    Object allowEmpty = 1)
(
    target(MutableString),
    name(split),
    doc("Split this string on every occurence of the specified characters and return the resulting array of Strings. If allowEmpty is null, empty strings will be ignored."),
)
{
    return split(
	this, charList, allowEmpty);
}

def MutableList«String» split(
    String this,
    String charList,
    Object allowEmpty = 1)
(
    target(String),
    doc("Split this string on every occurence of the specified characters and return the resulting array of Strings. If allowEmpty is null, empty strings will be ignored."),
)
{
    res := «String»[];
    start := 0;
    stop := 0;
    while(stop <= this.count)
    {
	while(stop < this.count and !(__in__(charList, this[stop])))
	{
	    stop++;
	}
	if(allowEmpty or stop > start)
	{
	    res.push(this[start..stop]);
	}
	stop = start = stop + 1;
    }
    return res;
}

def MutableList«String» splitChar(
    String this,
    Char char,
    Object allowEmpty = 1)
(
    target(String),
    alias(split),
    doc("Split this string on every occurence of the specified character and return the resulting array of Strings. If allowEmpty is null, empty strings will be ignored."),
)
{
}

def MutableList«String» splitCharMutable(
    MutableString this,
    Char char,
    Object allowEmpty = 1)
(
    target(MutableString),
    alias(split),
    name(splitChar),
    doc("Split this string on every occurence of the specified character and return the resulting array of Strings. If allowEmpty is null, empty strings will be ignored."),
)
{
    return split(this, char.toString(), allowEmpty);
}

def MutableList«String» splitCharImutable(
    ImutableString this,
    Char char,
    Object allowEmpty = 1)
(
    target(ImutableString),
    alias(split),
    name(splitChar),
    doc("Split this string on every occurence of the specified character and return the resulting array of Strings. If allowEmpty is null, empty strings will be ignored."),
)
{
    return split(this, char.toString(), allowEmpty);
}

def MutableList«String» splitList(
    String this,
    List«Char» charList,
    Object allowEmpty = 1)
(
    target(String),
    alias(split),
    name(splitList),
    doc("Split this string on every occurence of the specified characters and return the resulting array of Strings. If allowEmpty is null, empty strings will be ignored."),
)
{
    return split(this, "".join(charList), allowEmpty);
}

def MutableList«String» splitListMutable(
    MutableString this,
    List«Char» charList,
    Object allowEmpty = 1)
(
    target(MutableString),
    alias(split),
    name(splitList),
    doc("Split this string on every occurence of the specified characters and return the resulting array of Strings. If allowEmpty is null, empty strings will be ignored."),
)
{
    return split(this, "".join(charList), allowEmpty);
}

def MutableList«String» splitListImutable(
    ImutableString this,
    List«Char» charList,
    Object allowEmpty = 1)
(
    target(ImutableString),
    alias(split),
    name(splitList),
    doc("Split this string on every occurence of the specified characters and return the resulting array of Strings. If allowEmpty is null, empty strings will be ignored."),
)
{
    return split(this, "".join(charList), allowEmpty);
}

def MutableString replaceMutable(
    MutableString this,
    String original,
    String replacement)
(
    target(MutableString),
    name(replace),
    doc(
	"Replace all occurances in this string of the specified original with the specified replacement.", 
	"This method is currently rather inefficient.",
	),
)
{
    return replace(this, original, replacement).thaw;
}

def ImutableString replaceImutable(
    ImutableString this,
    String original,
    String replacement)
(
    target(ImutableString),
    name(replace),
    doc(
	"Replace all occurances in this string of the specified original with the specified replacement.", 
	"This method is currently rather inefficient.",
	),
)
{
    return replace(this, original, replacement).freeze;
}

def String replace(
    String this,
    String original,
    String replacement)
(
    target(String),
    doc(
	"Replace all occurances in this string of the specified original with the specified replacement.", 
	"This method is currently rather inefficient.",
	),
)
{
    start := 0;
    res := "".thaw;
    while(1)
    {
	end := searchString(this, original, start);
	if(end)
	{
	    res ~= this[start..end];
	    res ~= replacement;
	    start = end + original.count;
	}
	else
	{
	    res ~= this[start...];
	    return res;
	}
    }
    return ?;
}

def MutableString __mul__Mutable(
    MutableString this,
    Int count)
(
    target(MutableString),
    aliasReverse(__mul__),
    name(__mul__),
    doc("Returns a copy of this string, repeated the specified number of times")
)
{
    return __mul__(this, count).thaw;
}

def ImutableString __mul__Imutable(
    ImutableString this,
    Int count)
(
    target(ImutableString),
    aliasReverse(__mul__),
    name(__mul__),
    doc("Returns a copy of this string, repeated the specified number of times")
)
{
    return __mul__(this, count).freeze;
}

def String __mul__(
    String this,
    Int count)
(
    target(String),
    name(__mul__),
    aliasReverse(__mul__),
    doc("Returns a copy of this string, repeated the specified number of times")
)
{
    if(count < 0)
    {
	return ?;
    }
    res := "".thaw;
    (0..count).each(i){res ~= this}
    return res;
}

