attribute(internal, doc("Internally used module. Don't use directly."));

expandCode(
    def Int %name(
	%Type this, Char ch, Int from=0)
    (
	alias(search),
	target(%Type),
	doc(
	    "Search for the specified Character in the specified string. Returns the offset of the first occurance of the character if found, null otherwise.",
	    "This method is currently rather inefficient.",
	    ),
	)
    {
	this[from...].each(idx, i){if(i == ch){return idx}}
	return ?;
    },
    Type: [ImutableString, MutableString, String],
    name: [searchCharImutable, searchCharMutable, searchChar],
    );

expandCode(
    def Int %name(
	%Type this, String string, Int from = 0)
    (
	alias(search),
	target(%Type),
	doc("Search for the specified Substring in the specified string. Returns the offset of the first occurance of the character if found, null otherwise.",
	    "This method is currently rather inefficient.",
	    ),
	)
    {
	(from..this.count).each(idx){if(this[idx..(idx+string.count)] == string){return idx}}
	return ?;
    },
    Type: [ImutableString, MutableString, String],
    name: [searchStringImutable, searchStringMutable, searchString],
    );

expandCode(
    def %Type %name(
	%Type this, 
	List«Any» data)
    (
	alias(__format__), 
	name(formatList),
	target(%Type), 
    doc(
	"String formating. Replaces each % character found in the format string with the corresponding object from the list of parameters.", 
	"Note that this formating function is significantly simpler than e.g. the C printf function, as it only deals with replacing placeholders with strings, and not with e.g. numeric conversion. Use the various String::format functions for e.g. numeric formating."
	),
	)
    {
	return formatListInternal(this, data).%prop;
    },
    Type: [ImutableString, MutableString, String],
    name: [formatListImutable, formatListMutable, formatList],
    prop: [freeze, thaw, freeze],
    );

def String formatListInternal(
    String this, 
    List«Any» data) (internal, doc("Internal helper function for String::formatList."))
{
    res := "";
    listIdx := 0;
    i := 0;
    while(i < this.count)
    {
        ch := this[i];
        if(ch == '%')
        {
	    if(this[i+1] == '%')
            {
  	        i++;
                res ~= '%'
            } 
	    else 
	    {
                res ~= (data[listIdx] or "");
                listIdx++;
            }
        } 
	else
        {
	    res ~= ch;
        }
        i++;
    }
    return res;
}

expandCode(
    def %Type %name(
	%Type this, 
	HashMap«String, Any» data) 
    (
	alias(__format__), 
	name(formatMap),
	target(%Type), 
	doc(
	    "String formating. Replaces each %(NAME) token found in the format string with the corresponding object from the map of named parameters.", 
	    "Note that this formating function is significantly simpler than e.g. the C printf function, as it only deals with replacing placeholders with strings, and not with e.g. numeric conversion. Use the various format functions for e.g. numeric formating, such as Int::format."),
	)
    {
	return formatMapInternal(this, data).%prop;
    },
    Type: [ImutableString, MutableString, String],
    name: [formatMapImutable, formatMapMutable, formatMap],
    prop: [freeze, thaw, freeze],
    );

def String formatMapInternal(
    String this, 
    HashMap«String, Any» data)  (internal, doc("Internal helper function for String::formatMap."))
{
    res := "".thaw;
    i := 0;
    while(i < this.count)
    {
        ch := this[i];
        if(ch == '%')
        {
	    if(this[i+1] == '%')
            {
  	        i++;
                res ~= '%'
            } 
	    else
	    {
	        i++;
		if(this[i] == '(')
		{
		    i++;
		    end := searchChar(this[i...], ')');
		    if(end)
		    {
		        name := this[i..(i+end)];
			res ~= data[name];
			i=i+end;
		    } 
		    else 
		    {
			// ERROR
		    }
		} 
		else
		{
		    // ERROR
		}
            }
        } 
	else
        {
	    res ~= ch;
        }
        i++;
    }
    return res;
}

expandCode(
    def String %name(
	%Type this,
	Int count,
	Char char = ' ')
    (
	target(%Type),
	doc("Pad the left side of this string with the specified character up to a minimum of the specified number of characters"),
	name(lpad),
	)
    {
	if(this.count > count)
	{
	    return this;
	}
	res := "";
	(0..(count - this.count)).each(i)
	{
	    res ~= char;
	}
	res ~= this;
	return res;
    },
    Type: [ImutableString, MutableString, String],
    name: [lpadImutable, lpadMutable, lpad]
    );

expandCode(
    def %Type %name(
	%Type this,
	Int count,
	Char char = ' ')
    (
	target(%Type),
	doc("Pad the right side of this string with the specified character up to a minimum of the specified number of characters"),
	name(rpad),
	)
    {
	if(this.count >= count)
	{
	    return this;
	}
	res := this;
	(0..(count - this.count)).each(i)
	{
	    res ~= char;
	}
	return res;
    },
    Type: [ImutableString, MutableString, String],
    name: [rpadImutable, rpadMutable, rpad]
    );

expandCode(
    def Int %name(%Type this, Char char)
    (
	target(%Type),
	name(__in__)
    )
    {
	this.each(idx, ch)
	{
	    if(char == ch)
	    {
		return idx;
	    }
	}
	return ?;
    }
    Type: [ImutableString, MutableString, String],
    name: [__in__Imutable, __in__Mutable, __in__]
    );

expandCode(
    def MutableList«String» %name(
	%Type this,
	String charList,
	Any allowEmpty = 1)
    (
	target(%Type),
	doc("Split this string on every occurence of the specified characters and return the resulting array of Strings. If allowEmpty is null, empty strings will be ignored."),
	name(split),
	)
    {
	res := «String»[];
	start := 0;
	stop := 0;
	while(stop <= this.count)
	{
	    while(stop < this.count and !(__in__(charList, this[stop])))
	    {
		stop++;
	    }
	    if(allowEmpty or stop > start)
	    {
		res.push(this[start..stop]);
	    }
	    stop = start = stop + 1;
	}
	return res;
    },
    Type: [ImutableString, MutableString, String],
    name: [splitImutable, splitMutable, split]
    );


expandCode(
    def MutableList«String» %name(
	%Type this,
	Char char,
	Any allowEmpty = 1)
    (
	target(%Type),
	alias(split),
	name(splitChar),
	doc("Split this string on every occurence of the specified character and return the resulting array of Strings. If allowEmpty is null, empty strings will be ignored."),
	)
    {
	return split(this, char.toString(), allowEmpty);
    },
    Type: [ImutableString, MutableString, String],
    name: [splitCharImutable, splitCharMutable, splitChar]
    );

expandCode(
    def MutableList«String» %name(
	%Type this,
	List«Char» charList,
	Any allowEmpty = 1)
    (
	target(%Type),
	alias(split),
	name(splitList),
	doc("Split this string on every occurence of the specified characters and return the resulting array of Strings. If allowEmpty is null, empty strings will be ignored."),
	)
    {
	return split(this, "".join(charList), allowEmpty);
    },
    Type: [ImutableString, MutableString, String],
    name: [splitListImutable, splitListMutable, splitList]
    );

expandCode(
    def %Type %name(
	%Type this,
	String original,
	String replacement)
    (
	target(%Type),
	doc(
	    "Replace all occurances in this string of the specified original with the specified replacement.", 
	    "This method is currently rather inefficient.",
	),
	name(replace)
    )
    {
	start := 0;
	res := "".thaw;
	while(1)
	{
	    end := searchString(this, original, start);
	    if(end)
	    {
		res ~= this[start..end];
		res ~= replacement;
		start = end + original.count;
	    }
	    else
	    {
		res ~= this[start...];
		return res;
	    }
	}
	return ?;
    },
    Type: [ImutableString, MutableString, String],
    name: [replaceImutable, replaceMutable, replace]
    );

expandCode(
    def %Type %name(
	%Type this,
	Int count)
    (
	target(%Type),
	aliasReverse(__mul__),
	name(__mul__),
	doc("Returns a copy of this string, repeated the specified number of times")
    )
    {
	if(count < 0)
	{
	    return ?;
	}
        res := "".thaw;
	(0..count).each(i){res ~= this}
	return res;
    },
    Type: [ImutableString, MutableString, String],
    name: [__mul__Imutable, __mul__Mutable, __mul__]
    );
