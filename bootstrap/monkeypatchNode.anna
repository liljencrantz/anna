use(parser);

def Node __format__(
    Node this, 
    HashMap«String, Node» data) 
(
    target(Node), 
    documentation("Replace every internal identifier (an identifier prefixed with a '%' character) in the specified AST tree with the corresponding AST tree."),
)
{
    res := this;
    data.each(key, value)
    {
	res = res.replace(Identifier(?, key), value);
    }
    return res;
}

def Int isCallTo(
    Node this,
    String name)
(
    target(Node),
    documentation("Returns true if the specified AST node is a call node and the function node is an identifier with the specified name."),
)
{
    if(((this as Call).function as Identifier).name == name) { 1 } else { ? }
}

def Int isBlock(
    Node this)
(
    target(Node),
    documentation("Returns true if the specified AST node is a block."),
)
{
    if(((this as Call).function as Identifier).name == "__block__") { 1 } else { ? }
}