attribute(internal, doc("Internally used module. Don't use directly."))

use(parser)

def Node __format__(
    Node this
    HashMap«String, Node» data)  (
    target(Node)
    doc("Replace every internal identifier (an identifier prefixed with a '%' character) in the specified AST tree with the corresponding AST tree.")
){
    res := this
    data.each(key, value){
	res = res.replace(Identifier(?, key), value)
    }
    return res
}

def Int callTo?(
    Node this
    String name) (
    target(Node)
    doc("Returns true if the specified AST node is a call node and the function node is an identifier with the specified name.")
){
    if(((this as Call).function as Identifier).name == name) { 1 } else { ? }
}

def Int named?(
    Node this
    String name) (
    target(Node)
    doc("Returns true if the specified AST node is an identifier with the specified name."),
){
    if((this as Identifier).name == name) { 1 } else { ? }
}

def Int block?(
    Node this) (
    target(Node)
    doc("Returns true if the specified AST node is a block."
	"A block is any Call node where the function subnode is the __block__ identifier.")
){
    if(((this as Call).function as Identifier).name == "__block__") { 1 } else { ? }
}

def List«Node» filterByCall(Call this, String name) (
    target(Call),
    doc("Filters the call list for direct children that are calls to the specified function. For each found child, every parameter in it's parameter list is inserted into the resulting list of Node objects. This function is often useful when checking attribute lists."),
){
    res := «Node»[]
    this.each(chld){
	if(callTo?(chld, name)){ (chld as Call).each(param){res.push(param)} }
    }
    return res
}

def Int childNamed?(Call this, String name) (
    target(Call)
    doc("Returns true if this call has a parameter which is an identifier with the specified name.")
){
    this.each(chld){
	if(named?(chld, name)){ return 1 }
    }
    return ?
}

