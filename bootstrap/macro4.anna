use(parser);

def Node iterDeclare(Node id, Node nodeType)
{
    ast(__var__(%id, %nodeType, ?, {})).replace(ast(id), id).replace(ast(nodeType), nodeType);
}

def Node __iter__(Call node)
{
    checkNodeType(node.function, Call);

    n := List«Node»();  
    if(node.count < 2 or node.count > 3)
    {
	node.error("Invalid arguments for iteration");
    }
    
    checkNodeType(node[0], Identifier);
    checkNodeBlock(node[-1]);
    body := node[-1];

    if(node.count == 2)
    {
	n[0] = iterDeclare(
	    Identifier(body, "!unused"), 
	    ast(__staticInputTypeOf__(__staticInputTypeOf__(%list.__each__, 0),0)));
	n[1] = iterDeclare(
	    node[0],
	    ast(__staticInputTypeOf__(__staticInputTypeOf__(%list.__each__, 0), 1)));
    } else
    {
	checkNodeType(node[1], Identifier);
	n[0] = iterDeclare(
	    node[0],
	    ast(__staticInputTypeOf__(__staticInputTypeOf__(%list.__each__, 0),0)));
	n[1] = iterDeclare(
	    node[1],
	    ast(__staticInputTypeOf__(__staticInputTypeOf__(%list.__each__, 0), 1)));
    }
    
    attr := ast({block});
    decl := Call(body, Identifier(body, "__block__"), n[0], n[1]);    
    
    fun := node.function as Call;
    origName := fun[1] as Identifier;  

    fun[1] = Identifier(fun[1], "__" ~ origName.name ~ "__");

    func := Call(
	body, 
	Identifier(body, "__def__"),
	Identifier(body, "!iterator"), 
	NullLiteral(body),
	decl,
	attr, 
	body);

    res := Call(
	node, 
	fun,  
	func);
    list := (fun as Call)[0];
    if(origName.name == "map")
    {
//	print(list, "\n\n");
        res = ast(
	    {
		%body := %bodyValue;
	        %list := %listValue;
	        __res := %list.__map__(%body);
		__res as %nodeType;
	    }()).replace(ast(%bodyValue), func) 
	    .replace(ast(listValue), list) 
	    .replace(
		ast(nodeType), 
		Call(?, ast(__specialize__), ast(__staticReturnTypeOf__(%list.__map__)), ast({__staticReturnTypeOf__(%body)}))) as Call;
    } else
    {
        res = ast(
	    {
 	        %list := %listValue;
		%body := %bodyValue;
	        %list.%fun(%body);
	    }()).replace(ast(bodyValue), func) 
	    .replace(ast(fun), fun[1])
	    .replace(ast(listValue), list) as Call;
    }
    res = res.replace(ast(body), Identifier(?, identifier("body")))
	.replace(ast(list), Identifier(?, identifier("list"))) as Call;
//    print("Iteration body:\n", res, "\n");

    return res;
}

macro reduce(node)
{
    checkNodeType(node.function, Call);

    n := List«Node»();  
    if(node.count < 2 or node.count > 3)
    {
	node.error("Invalid arguments for iteration");
    }
    
    checkNodeType(node[0], Identifier);
    checkNodeBlock(node[-1]);
    body := node[-1];

    if(node.count == 2)
    {
	n[0] = iterDeclare(
	    Identifier(body, "!unused"), 
	    ast(__staticInputTypeOf__(__staticInputTypeOf__(%list.__each__, 0),0)));
	n[1] = iterDeclare(
	    node[0],
	    ast(__staticInputTypeOf__(__staticInputTypeOf__(%list.__each__, 0), 1)));
    } else
    {
	checkNodeType(node[1], Identifier);
	n[0] = iterDeclare(
	    node[0],
	    ast(__staticInputTypeOf__(__staticInputTypeOf__(%list.__each__, 0),0)));
	n[1] = iterDeclare(
	    node[1],
	    ast(__staticInputTypeOf__(__staticInputTypeOf__(%list.__each__, 0), 1)));
    }
    
    attr := ast({block});
    decl := Call(body, Identifier(body, "__block__"), n[0], n[1]);    
    
    fun := node.function as Call;
    origName := fun[1] as Identifier;  

    fun[1] = Identifier(fun[1], "__" ~ origName.name ~ "__");

    func := Call(
	body, 
	Identifier(body, "__def__"),
	Identifier(body, "!iterator"), 
	NullLiteral(body),
	decl,
	attr, 
	body);

    res := Call(
	node, 
	fun,  
	func);
    list := (fun as Call)[0];
    if(origName.name == "map")
    {
        res = ast(
	    {
	        %list := %listValue;
		%body :== %bodyValue;
	        __res := %list.__map__(%body);
		__res as %nodeType;
	    }()).replace(ast(%bodyValue), func) 
	    .replace(ast(%listValue), list) 
	    .replace(
		ast(%nodeType), 
		Call(?, ast(__specialize__), ast(__staticReturnTypeOf__(%list.__map__)), ast({__staticReturnTypeOf__(%body)}))) as Call;
    } else
    {
        res = ast(
	    {
 	        %list := %listValue;
		%body :== %bodyValue;
	        %list.%fun(%body);
	    }()).replace(ast(%bodyValue), func) 
	    .replace(ast(%fun), fun[1])
	    .replace(ast(%listValue), list) as Call;
    }
    res = res.replace(ast(%body), Identifier(?, identifier("body")))
	.replace(ast(%list), Identifier(?, identifier("list"))) as Call;

    return res;
}

macro each(node){__iter__(node)}
macro filter(node){__iter__(node)}
macro find(node){__iter__(node)}
macro map(node){__iter__(node)}
