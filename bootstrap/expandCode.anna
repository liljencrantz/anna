
macro expandCode(node)
(
    documentation(
	"
    The expandCode macro is used to create multiple instances of the
    same basic piece of code but with slight variations. One example
    of where this is useful is the constructor for date.Delta, where
    we need to assign every argument to the equivalent member:",

        code:"
    this.year = year;
    this.month = month;
    ...
    this.microsecond = microsecond;",

    "The expandCode macro allows us to write the same thing in a less
    verbose way.",

        code:"
    expandCode(
	this.%name = %name,
	name: [year, ..., microsecond]);",
    
        "
    During the compilation pass the expandCode will expand the above
    code into statements identical to the ones given above. Using
    expandCode not only allows you to write less code, because you're
    not repeating yourself, you can quickly change the code in a
    single place.",

        "
    Code equivalent to code written using expandCode can usually be
    created using the reflection api, but such cde offers no compile time type
    safety and is significantly more verbose.
")
)
{
    if(node.count < 2)
    {
	node.error("Too few arguments to expandCode macro - expected at least two arguments");
	return ?;
    }
    count := ? as Int;
    code := node[0];
    param := «HashMap«String, Node»»[];
    (1..node.count).each(idx)	
    {
        chld := node[idx];
	checkNodeCallTo(chld, "__mapping__");
        call := chld as Call;
	checkCallCount(call, 2);
	checkNodeType(call[0], InternalIdentifier);
        name := (call[0] as InternalIdentifier).name;
	checkNodeCallTo(call[1], "MutableList");
        lst := call[1] as Call;
	if(count)
	{
	    if(count != lst.count)
	    {
		lst.error("Wrong number of parameters in list");
		return ?;
	    }
	    lst.each(idx, val)
	    {
		param[idx][name] = val;
	    }
	} else
	{
	    count = lst.count;
	    lst.each(val)
	    {
		param ~= [[name: val]];
	    }
	}
    }
    
    res := Call(node, Identifier(node, "nothing"));

    res ~= param.map(p){ code % p };
    //  print(res, "\n");
    return res;
}

