/*
  A bunch of additional functions to be inserted into the basic builtin types
 */

def String hashMapToString(HashMap this)
(
    name(toString), 
    target(HashMap), 
)
{
    return "[" ~ ", ".join(this.map(key, value){"" ~ key ~ " => " ~ (value or "null")}) ~ "]";
}

def String intFormat(Int this, Int base, Char padding, Int length)
(
    name(format), 
    target(Int), 
)
{
    var digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    if(base > 36)
    {
	return ?;
    }
    var res = "";
    var neg = "";
    if(this < 0)
    {
	neg = "-";
	this = -this;
    }
    
    if(this == 0)
    {
	res = "0";
    } else 
    {
	while(this != 0)
	{
	    res = "" ~ digits[this ^mod base] ~ res;
	    this = this / base;
	}
    }
    
    if(length)
    {
	while(res.count < length)
	{
	    res = "" ~ padding ~ res;
	}
    }
    
    return neg ~ res;
}

def String pairToString(Pair this)
(
    name(toString), 
    target(Pair), 
)
{
    return "" ~ (this.first or "null") ~ ":" ~ (this.second or "null");
}


def listToString(List this)
(
    target(List),
    name(toString),
)
{
    return "[" ~ ", ".join(this.map(value){""~(value or "null")}) ~ "]";
}

