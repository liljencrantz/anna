attribute(internal, doc("Internal module for the __range__ macro."));

macro __range__(node) (doc("Syntactic sugar for creating Range objects."))
{
    checkCallCount(node, 2);
    node.function = Identifier(node, "Range");

    if(!(node.count in (Range(1,3,1))))
    {	
	node.error("Wrong number of arguments for range");
	return ?;	
    }

    if(((node[0] as Call).function as Identifier).name == "Pair")
    {
        pair := node[0] as Call;
	if(pair.count != 2)
	{
	    node.error("Wrong number of arguments for range");
	    return ?;
	}
	node[0] = pair[0];
	node[1] = node[1] or NullLiteral(node);
	node ~= [pair[1]];
    }
    else
    {
	if(((node[1] as Call).function as Identifier).name == "Pair")
	{
  	    pair := node[1] as Call;
	    if(pair.count != 2)
	    {
		node.error("Wrong number of argument for range");
		return ?;
	    }
	    node[1] = pair[0];
	    node ~= [pair[1]];
	} 
	else
	{
	    node ~= [NullLiteral(node)];
	}
    }
    return node;
}
