/*
  A bunch of additional functions to be inserted into the basic builtin types
 */

def String hashMapToString(HashMap this)
(
    name(toString), 
    target(HashMap), 
    documentation("Returns a String representation of this HashMap."),
)
{
    return "[" ~ ", ".join(this.map(key, value){"" ~ key ~ " : " ~ (value or "null")}) ~ "]";
}

def String intFormat(Int this, Int base=10)
(
    name(format), 
    target(Int), 
    documentation("Returns a formated version of this string in the specified base."),
)
{
    var digits = "0123456789abcdefghijklmnopqrstuvwxyz";

    if(base > 36)
    {
	return ?;
    }
    var res = "";
    var neg = "";
    if(this < 0)
    {
	neg = "-";
	this = -this;
    }
    
    if(this == 0)
    {
	res = "0";
    } else 
    {
	while(this != 0)
	{
	    res = "" ~ digits[this ^mod base] ~ res;
	    this = this / base;
	}
    }
    
    return neg ~ res;
}

def String pairToString(Pair this)
(
    name(toString), 
    target(Pair), 
    documentation("Returns a String representation of this Pair."),
)
{
    return "" ~ (this.first or "null") ~ ":" ~ (this.second or "null");
}


def listToString(List this)
(
    target(List),
    name(toString),
    documentation("Returns a string representation of this List."),
)
{
    return "[" ~ ", ".join(this.map(value){""~(value or "null")}) ~ "]";
}

def listAll(List this)
(
    target(List),
    name(all),
    documentation("Returns true if all members of this list are non-Null."),
)
{
    res := 1 as Object;
    this.each(i){ res = res and i }
    return res;
}
