attribute(internal, doc("Internally used module. Don't use directly."));

/*
  A bunch of additional functions to be inserted into the basic builtin types
 */

def String hashMapToString(HashMap«%Key, %Value» this)
(
    name(toString), 
    target(HashMap), 
    doc("Returns a String representation of this HashMap."),
    template(%Key:HashKey),
    template(%Value:Object),
)
{
    return "[" ~ ", ".join(this.map(key, value){"".thaw ~ key ~ ": " ~ String::convert(value)}) ~ "]";
}

def String intFormat(Int this, Int base=10)
(
    name(format), 
    target(Int), 
    doc("Returns a formated version of this string in the specified base."),
)
{
    digits := "0123456789abcdefghijklmnopqrstuvwxyz";

    if((base > 36) or (base < 2))
    {
	return ?;
    }

    res := "";
    neg := "";
    if(this < 0)
    {
	neg = "-";
	this = -this;
    }
    
    if(this == 0)
    {
	res = "0";
    } 
    else 
    {
	while(this != 0)
	{
	    res = "" ~ digits[this ^mod base] ~ res;
	    this = this / base;
	}
    }
    
    return neg ~ res;
}

def String pairToString(Pair«%First,%Second» this)
(
    name(toString), 
    target(Pair), 
    doc("Returns a String representation of this Pair."),
    template(%First:Hashable),
    template(%Second:Hashable),
)
{
    return "" ~ (this.first or "null") ~ "|" ~ (this.second or "null");
}

type Hashable
{
    def Int hashCode(Hashable this) (bound)
    {
    }
}

def Int pairHashCode(Pair«%First,%Second» this)
(
    name(hashCode), 
    target(Pair), 
    doc("Returns a hash code for this Pair."),
    template(%First:Hashable),
    template(%Second:Hashable),
)
{
    this.first.hashCode() + this.second.hashCode()
}

type Comparable
{
    def Int __cmp__(Comparable this, Object other) (bound)
    {
    }
}

def Int pairCmp(Pair«%First,%Second» this, Pair«%First,%Second» other)
(
    name(__cmp__), 
    target(Pair), 
    doc("Compares two pairs."),
    template(%First:Comparable),
    template(%Second:Comparable),
)
{
    cmp1 := this.first.__cmp__(other.first);
    if(cmp1 == 0)
    {
	return this.second.__cmp__(other.second);
    }
    else
    {
	return cmp1;
    }
}

def HashMap«%Key, %Value» hashMapSetAll(HashMap«%Key, %Value» this, Pair«%Key, %Value» value...)
(
    name(__setAll__), 
    target(HashMap),
    template(%Key:HashKey),
    template(%Value:Object),
    internal,
    doc("This method is used internally by the HashMap initializer code. It sets multiple keys to their corresponding values.")
)
{
    value.each(pair)
    {
	this[pair.first] = pair.second;
    }
    return this;
}

