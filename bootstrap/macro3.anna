use(parser);

def Node __update__(Call node)
{
    checkNodeType(node.function, Identifier);
    nameId := node.function as Identifier;

    /* We'd like to use the Range short hand here, but can't because
     * that would cause a circular dependency. */
    name := nameId.name[Range(0,-2,1)] ~ "Assign__";

    if(node.count == 1)
    {
	return ast(%x = %x.%y()).replace(ast(%x), node[0]).replace(ast(%y), Identifier(node.function, name));
    }
    if(node.count == 2)
    {
	return ast(%x = %x.%y(%z)).replace(ast(%x), node[0]).replace(ast(%y), Identifier(node.function, name)).replace(ast(%z), node[1]);
    }
    node.error("Invalid number of arguments");
    return NullLiteral(node);
}

macro __increase__(node){__update__(node)}
macro __decrease__(node){__update__(node)}
macro __append__(node){__update__(node)}
macro __next__(node){__update__(node)}
macro __prev__(node){__update__(node)}

