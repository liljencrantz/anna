
macro enumType(definition)
(
    doc("
The enum macro is used to define enumerations types. The basic syntax is:

enum TypeName
{
    enumName, someOtherEnumName, enumWithValue64= 64, ...
}

")
)
{
    body := definition[2] as Call;
    definition.function = ast(classType);
    
    newBody := ast(
	{
	    var Int %value;
	}
    );

    nameBody := ast(
	{
	    if( !this.%value)
	    {
		return "?";
	    }
	}
    );

    initFun := ast(
	def __init__(Int value)
	{
	    this.%value = value
	}
    );

    hashFun := ast(
	def hashCode()
	{
	    %value.hashCode();
	}
    );

    valueGetter := ast(
	def %valueGetter()
	{
	    %value;
	}
    );

    valueProperty := ast(
	var Int __value (property(%valueGetter));
    );

    cmpFun := ast(
	def __cmp__(Object other)
	{
	    if(other as Int)
	    {
		return this.%value - (other as Int);
	    } else {
		if(other as %Type)
		{
		    return this.%value - (other as %Type).%value;
		}
	    }
	    return ?;
	}
    );

    idx := 0;
    isFirst := 1;
    body.each(el)
    {
        id := ? as Identifier;

	if(el as Identifier)
	{
	    id = el as Identifier;
	}
	if(el.callTo?("__assign__"))
	{
  	    ass := el as Call;
	    checkCallCount(ass, 2);
	    checkNodeType(ass[0], Identifier); 
	    checkNodeType(ass[1], IntLiteral); 
  	    id = ass[0] as Identifier;
  	    nextIdx := (ass[1] as IntLiteral).payload;
	    if(nextIdx <= idx and !isFirst)
	    {
		ass[1].error(
                    "Invalid enum value %. Previous value was % and values must be increasing." % [
                        nextIdx, idx-1]);
		return ?;
	    }
	    idx = nextIdx;
	    
	}
	
	isFirst = ?;

	if(!id)
	{
	    
	    definition.error("Unexpected thingie");
	    return ?;
	}
	getter := "!" ~ id.name ~ "Getter";
	fun := ast(
	    def %Type %name() (static) 
	    {
		return %Type(%myValue)
	    }
	    );
	prop := ast(
	    var %Type %name (static, property(%functionName))
	    );
	cmp := ast(
	    if(this.%value == %intValue)
	    {
		return %strValue
	    }
	    );
	
	fun = (
	    fun % [
		"name": Identifier(definition, getter),
		"myValue": IntLiteral(definition, idx)
		]) as Call;
	
	prop = (
	    prop % [
		"name": Identifier(definition, id.name),
		"functionName": Identifier(definition, getter)
		]) as Call;
	cmp = (
	    cmp % [
		"intValue": IntLiteral(definition, idx),
		"strValue": StringLiteral(definition, id.name)
		]) as Call;
	
	newBody ~= [fun];
	newBody ~= [prop];
	nameBody ~= [cmp];
	idx++;
    }

    newBody ~= [
	initFun, cmpFun, hashFun, 
	valueGetter, valueProperty];
    
    nameFun := ast(
	def String toString()
	{}
	);
    (nameFun[2] as Call)[4] = nameBody;
    newBody ~= [nameFun];
    
    definition[2] = newBody;
    definition = (definition % [
		      "value": Identifier(?, identifier("value")),
		      "Type": definition[0].copy(),
		      "valueGetter": Identifier(?, identifier("valueGetter")),
		      ]) as Call;

//    print(definition,"\n");	    

    return definition;
}

