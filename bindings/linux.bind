include(
    "<sys/types.h>", "<sys/stat.h>", "<unistd.h>", "<fcntl.h>",
    "<sys/time.h>", "<sys/resource.h>", "<signal.h>", "<sys/wait.h>", 
    "<grp.h>", "<stdint.h>", "<poll.h>", "<sys/select.h>", "<locale.h>", 
    "<termios.h>", "<sys/signalfd.h>",
    )

signal
{

    def Int signalfd(Int fd, SignalSet mask, Int flags) (doc("Create a file descriptor for accepting signals."))

    cStruct SignalInfoFd (name(signalfd_siginfo), doc("A structure describing a recieved signal."))
    {
	var Int signal (name(ssi_signo), doc("Signal number."))
	var Int code (name(ssi_code), doc("Signal code."))
	var Int pid (name(ssi_pid), doc("PID of sender"))
	var Int uid (name(ssi_uid), doc("Real UID of sender"))
	var Int fd (name(ssi_fd), doc("File descriptor for io signal."))
	var Int tid (name(ssi_tid), doc("Kernel timer id for signals relating to Posix timers"))
	var Int band (name(ssi_band), doc("Band event for io signal"))
    }
 
    signalfdFlag
    {
	attribute(doc("Flags determining the mode for unix.proc.signalfd"))

	const Int nonBlock (define(SFD_NONBLOCK), doc("The resulting file descriptor is non-blocking"))
	const Int closeOnExec (define(SFD_CLOEXEC, doc("Close the resulting file descriptor on exec")))
    }
   

    def Bool readSignal(Int fd, SignalInfoFd info) (name(anna_read_signal), doc("Read one signal information structure form the specified file descriptor."))

}
