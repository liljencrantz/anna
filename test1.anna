
class Complex
{
	var Float real;
	var Float img;

	function __init__(Float r, Float i)
	{
		this.real = r;
		this.img = i;
	}

	function __addComplex__(Complex other)
	{
		return Complex(this.real + other.real, this.img + other.img);
	}


	function __mulComplex__(Complex other)
	{
		return Complex(this.real * other.real -this.img*other.img, this.real * other.img + this.img*other.real);
	}

	function abs()
	{
		return (this.real*this.real + this.img+this.img).__sqrt__();
	}

	function __expInt__(Int i)
	{
		return this * this;
	}

}


var val = Complex(1.0, 1.0);
var val2 = Complex(2.0, 3.0);

function mandelbrot(Complex p0, Int maxStep)
{
    var p = p0;
    var step = 1;
    while(p.abs() < 2.0 and step < maxStep) 
    {
        p = (p @exp 2) + p0;
	step = step + 1;
    }
    return step;
}

print(mandelbrot(Complex(0.37,0.3),32));

/*
class Foo template (X:Int)
{

	function foo(X in)
	{
		return in+1;
	}

}
*/
/*
var foo = List();
foo ~= 3;
foo[0]=2;
print(foo[0]);
*/
/*
var lst = List<Int>();

lst ~= 3;
lst ~= 5;
lst ~= 1;

print((lst.first(i){i!=3})~"foo");
*/
/*
lst.filter(i){i>2}.each(i){print(i)}
*/
/*
class BinaryMapNode template(Key:Int), template(Value:Object)
{
	var Key key;
	var Value value;
}

class BinaryMap template(Key:Int), template(Value:Object)
{
	var BinaryMapNode<Key,Value> root;

	function __setItem__(Key key, Value value)
	{
		this.root = BinaryMapNode<Key,Value>();
		this.root.key=key;
		this.root.value=value;	
	}	
}

var foo = BinaryMap<Int, String>();

foo[3]="hej";

print(foo.root.value);

*/
/*
function foo(Int in){
	if(in >4){
		return 32;
	}
	else {
		return "hej";
	}	 
	return in+1;
}

function bar(){"ggg"}

print(bar());

print(foo(31));
print("Hej");
*/