
class Complex
{
	var Float real;
	var Float img;

	function __init__(Float r, Float i)
	{
		this.real = r;
		this.img = i;
	}

	function __addComplex__(Complex other)
	{
		return Complex(
			this.real + other.real, 
			this.img + other.img);
	}

	function __addFloat__(Float other)
	{
		return Complex(this.real + other, this.img);
	}

	function __subComplex__(Complex other)
	{
		return Complex(this.real - other.real, this.img - other.img);
	}

	function __subFloat__(Float other)
	{
		return Complex(this.real - other, this.img);
	}

	function __mulComplex__(Complex other)
	{
		return Complex(
			this.real * other.real -this.img*other.img, 
			this.real * other.img + this.img*other.real);
	}

	function __mulFloat__(Float other)
	{
		return Complex(this.real * other, this.img*other);
	}

	function __divComplex__(Complex other)
	{
		Float divisor = other.real*other.real + other.img*other.img;
		return Complex(
			(this.real * other.real  + this.img*other.img)/divisor, 
			(this.img * other.real - this.real*other.img)/divisor);
	}

	function __divFloat__(Float other)
	{
		return Complex(this.real / other, this.img / other);
	}

	function abs()
	{
		return (this.real*this.real + this.img*this.img).__sqrt__();
	}

}
/*
class Range
{

	var Int from;
	var Int to;

	function __init__(Int from, Int to)
	{
		this.from = from;
		this.to=to;
	}

	function __eachValue__(function Null f (Int key, Int value))
	{
		var i=this.from;
		while(i<this.to)
		{
			f(i, i+this.from);
			i = i+1;
		}
		return null;
	}

}
*/

function mandelbrot(Complex p0, Int maxStep)
{
    var p = p0;
    var step = 1;
    while(p.abs() < 2.0 and step < maxStep) 
    {
        p = p*p + p0;
	step = step + 1;
    }
    return step;
}

var y=-2.0;
while(y<=2.0)
{
	var x=-2.0;
	while(x<=2.0)
	{
		if(mandelbrot(Complex(x,y),64)==64){print("##")}else{print("  ")};
		x = x+0.1;
	}
	y = y+0.1;
	print("\n");
}

/*
class Foo template (X:Int)
{

	function foo(X in)
	{
		return in+1;
	}

}
*/
/*
var foo = List();
foo ~= 3;
foo[0]=2;
print(foo[0]);
*/
/*
var lst = List<Int>();

lst ~= 3;
lst ~= 5;
lst ~= 1;

print((lst.first(i){i!=3})~"foo");
*/
/*
lst.filter(i){i>2}.each(i){print(i)}
*/
/*
class BinaryMapNode template(Key:Int), template(Value:Object)
{
	var Key key;
	var Value value;
}

class BinaryMap template(Key:Int), template(Value:Object)
{
	var BinaryMapNode<Key,Value> root;

	function __setItem__(Key key, Value value)
	{
		this.root = BinaryMapNode<Key,Value>();
		this.root.key=key;
		this.root.value=value;	
	}	
}

var foo = BinaryMap<Int, String>();

foo[3]="hej";

print(foo.root.value);

*/
/*
function foo(Int in){
	if(in >4){
		return 32;
	}
	else {
		return "hej";
	}	 
	return in+1;
}

function bar(){"ggg"}

print(bar());

print(foo(31));
print("Hej");
*/