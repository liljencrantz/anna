var str = "hej baberiba!\n";
str[0]='H';
print(str);

/*
class Foo
{
    property Int count getter: getCount;
    function getCount() private
    {
        return 3;
    };

OR

    function count() property
    {
        return 3;
    };

}
*/
/*
Class Range template (T:Int)
{

    var T from;
    var T to;
    var T step;
    
    function __init__(T from, T to, T step)
    {
	this.from = from;
	this.to=to;
	this.step=step;
    }
    
    function __eachPair__(function Null f (Int key, T value))
    {
	var i=this.from;
	var idx = 0;
	
	while(i<this.to)
	{
	    f(idx, i);
	    i = i+this.step;
	    idx++;
	}
	return null;
    }
    
}
*/
/*
(1..10).each(key:value)
{
    print(value, "\n");
}
*/
/*
var r = Range<Float>(1.0, 12.0, 1.5);

r.each(key:value)
{
    print(value,"\n");
}
*/

/*
function mandelbrot(Complex p0, Int maxStep)
{
    var p = p0;
    var step = 0;
    while(@abs p < 2.0 and step++ < maxStep) 
    {
        p = p*p + p0;
    }
    return step;
}
*/
/*
var y=-2.0;
while(y<=2.0)
{
    var x=-2.0;
    while(x<=2.0)
    {
	if(mandelbrot(Complex(x,y),64)==64){print("#")}else{print(" ")};
	x += 0.05;
    }
    y += 0.1;
    print("\n");
}
*/
/*
var foo = List();
foo ~= 3;
foo[0]=2;
print(foo[0]);
*/
/*
var lst = List<Int>();

lst ~= 3;
lst ~= 5;
lst ~= 1;

print((lst.first(i){i!=3})~"foo");
*/
/*
lst.filter(i){i>2}.each(i){print(i)}
*/

class BinaryMapNode template(Key:Int), template(Value:Object)
{
    var Key key;
    var Value value;
    var BinaryMapNode<Key, Value> left;
    var BinaryMapNode<Key, Value> right;	
    
    function BinaryMapNode<Key,Value> __init__(Key key, Value value)
    {
	this.key=key;
	this.value=value;
    }
    
}

class BinaryMap template(Key:Int), template(Value:Object)
{
    var BinaryMapNode<Key,Value> root;
    
    function BinaryMap<Key,Value> __init__()
    {
    }
    
    function BinaryMapNode<Key,Value> insert(BinaryMapNode<Key,Value> node,Key key, Value value)
	private
    {
	if(node)
	{
	    if(node.key>key)
	    {
		node.left=this.insert(node.left, key,value);
	    }
	    else
	    {
		if(node.key<key)
		{
		    node.right = this.insert(node.right, key,value);
		}
		else 
		{
		    node.key=key;
		    node.value=value;
		}
	    }
	}
	else
	{
	    node = BinaryMapNode<Key,Value>(key, value);		
	}
	return node;	    
    }
    
    function Value find(BinaryMapNode<Key,Value> node, Key key)
	private
    {
	if(node)
	{
	    if(node.key == key)
	    {
		return node.value;
	    }
	    if(key < node.key) 
	    {
		return this.find(node.left, key);
	    }
	    else
	    {
		return this.find(node.right, key);
	    }
	}
	return null;
    }
    
    function Value __setItem__(Key key, Value value)
    {
	this.root = this.insert(this.root, key, value);
	return value;
    }
    
    function Value __getItem__(Key key)
    {
	return this.find(this.root, key);
    }
    
    function String toString()
    {
	return "Map!";
    }

    function Null __each__(function Null f (Key key, Value value))
    {
	this.eachNode(this.root, f);
    }
    
    function Null eachNode(BinaryMapNode<Key,Value> node, function Null f (Key key, Value value))
	private
    {
	if(node)
	{
	    this.eachNode(node.left, f);
	    f(node.key, node.value);
	    this.eachNode(node.right, f);
	}
    }
    
}

var foo = BinaryMap<Int, String>();
foo[3]="aaa";
foo[2]="bbb";
foo[3]="ddd";
foo[5]="ccc";
foo.each(k:v)
{
    print(k,": ", v, "\n");
}

/*
function foo(Int in){
	if(in >4){
		return 32;
	}
	else {
		return "hej";
	}	 
	return in+1;
}

function bar(){"ggg"}

print(bar());

print(foo(31));
print("Hej");
*/
