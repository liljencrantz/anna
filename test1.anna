
/*
class Foo
{
    property Int count getter getCount, setter setCount;
    var Int tralala;
    
    function Int getCount() private
    {
        return this.tralala;
    };

    function setCount(Int val) private
    {
      this.tralala=val;
        return val;
    };

}

class Bar
	extends Foo
{
    
    function ggg()
    {
	return 7;
    }
    
}

var bbb = Bar();
bbb.tralala=7;

print(bbb.count);
*/
/*
macro noop(node, foo, bar)
{
    if(node.count == 1)
    {
	return node[0];
    }
    else
    {
	return node.error("Expected exactly one argument to macro noop");
    }
}
*/
macro weeo(node, foo, bar)
{
    node.each(ch)
    {
	ch.print();
    }
    
    return Call(node, Identifier(node,"print"), IntLiteral(node, 777));

/*    
    var wee = AST(print(ggg,"\n"));
    return wee.replace(AST(ggg), AST(foo));
*/
}

function main()
{
//    var foo = 7;
//    weeo(aa,7);
//    print(noop(9));
}

macro __enumAttribute__(node, foo, bar)
{
    var def = node[1] as Call;
    var body = def[3] as Call;
    
    if(!body)
    {
	node.error("Missing body");
	return null;
    }

    var newBody = AST(
	{
	    var Int value;
	}
	);

    var nameBody = AST(
	{
	    if( !this.value)
	    {
		return "null";
	    }
	}
	);

    var init = AST(function __init__(Int value){this.value = value;});
    
    body.each(idx:el)
    {
	var id = el as Identifier;
	if(!id)
	{
	    node.error("Unexpected thingie");
	    return null;
	}
	var getter = "!" ~ id.name ~ "Getter";
	var fun = AST(function placeholder1() static {return placeholder2;});
	var prop = AST(property Int placeholder1 getter placeholder2);
	var cmp = AST(if(this.value == placeholder1){return placeholder2});
	fun = fun.replace(AST(placeholder1),Identifier(node, getter))
	    .replace(AST(placeholder2),IntLiteral(node, idx));
	prop = prop.replace(AST(placeholder1),Identifier(node, id.name))
	    .replace(AST(placeholder2), Identifier(node, getter));
	cmp = cmp.replace(AST(placeholder1),IntLiteral(node, idx))
	    .replace(AST(placeholder2), StringLiteral(node, id.name));
	newBody ~= [fun];
	newBody ~= [prop];
	nameBody ~= [cmp]
    }

    newBody ~= [init];
    
    var nameFun = AST(function toString(){});
    nameFun.print();
    nameFun[4] = nameBody;
    newBody ~= [nameFun];
    
    def[3] = newBody;
//    nameBody.print();
    
    return def;
}

class Blubb enum
{
    foo;
    bar;
    baz;
}

function main2()
{
//    print( 12 in [1,6,7,12,39]);
    var bbb = Blubb(1);
    print(bbb.baz, "\n", bbb.toString(), "\n");

    print(Int.member.count);
    
}

main2();

//main();

/*
Class Range template (T:Int)
{

    var T from;
    var T to;
    var T step;
    
    function __init__(T from, T to, T step)
    {
	this.from = from;
	this.to=to;
	this.step=step;
    }
    
    function __eachPair__(function Null f (Int key, T value))
    {
	var i=this.from;
	var idx = 0;
	
	while(i<this.to)
	{
	    f(idx, i);
	    i = i+this.step;
	    idx++;
	}
	return null;
    }
    
}
*/
/*
(1..10).each(key:value)
{
    print(value, "\n");
}
*/
/*
var r = Range<Float>(1.0, 12.0, 1.5);

r.each(key:value)
{
    print(value,"\n");
}
*/
/*
var lst = List<Int>();

lst ~= 3;
lst ~= 5;
lst ~= 1;

print((lst.first(i){i!=3})~"foo");
*/
/*
lst.filter(i){i>2}.each(i){print(i)}
*/

/*
function foo(Int in){
	if(in >4){
		return 32;
	}
	else {
		return "hej";
	}	 
	return in+1;
}

function bar(){"ggg"}

print(bar());

print(foo(31));
print("Hej");
*/
