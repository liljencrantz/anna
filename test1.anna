/*
class Range template (T:Int)
{

    var T from;
    var T to;
    var T step;
    
    function __init__(T from, T to, T step)
    {
	this.from = from;
	this.to=to;
	this.step=step;
    }
    
    function __eachPair__(function Null f (Int key, T value))
    {
	var i=this.from;
	var idx = 0;
	
	while(i<this.to)
	{
	    f(idx, i);
	    i = i+this.step;
	    idx++;
	}
	return null;
    }
    
}
*/
/*
(1..10).each(key:value)
{
    print(value, "\n");
}
*/
 /*
var r = Range<Float>(1.0, 12.0, 1.5);

r.each(key:value)
{
    print(value,"\n");
}
 */

var abc = 12;

function foo(Int a...)
{
    a.each(key:value)
    {
	print(key, " ", value, "\n");
    }
}

foo(1,2, 7, 9, 3);

//(3..7).each(a:b){print(b)}

/*
function mandelbrot(Complex p0, Int maxStep)
{
    var p = p0;
    var step = 0;
    while(@abs p < 2.0 and step++ < maxStep) 
    {
        p = p*p + p0;
    }
    return step;
}
*/
/*
var y=-2.0;
while(y<=2.0)
{
    var x=-2.0;
    while(x<=2.0)
    {
	if(mandelbrot(Complex(x,y),64)==64){print("#")}else{print(" ")};
	x += 0.05;
    }
    y += 0.1;
    print("\n");
}
*/



/*
var foo = List();
foo ~= 3;
foo[0]=2;
print(foo[0]);
*/
/*
var lst = List<Int>();

lst ~= 3;
lst ~= 5;
lst ~= 1;

print((lst.first(i){i!=3})~"foo");
*/
/*
lst.filter(i){i>2}.each(i){print(i)}
*/
/*
class BinaryMapNode template(Key:Int), template(Value:Object)
{
	var Key key;
	var Value value;
}

class BinaryMap template(Key:Int), template(Value:Object)
{
	var BinaryMapNode<Key,Value> root;

	function __setItem__(Key key, Value value)
	{
		this.root = BinaryMapNode<Key,Value>();
		this.root.key=key;
		this.root.value=value;	
	}	
}

var foo = BinaryMap<Int, String>();

foo[3]="hej";

print(foo.root.value);

*/
/*
function foo(Int in){
	if(in >4){
		return 32;
	}
	else {
		return "hej";
	}	 
	return in+1;
}

function bar(){"ggg"}

print(bar());

print(foo(31));
print("Hej");
*/
