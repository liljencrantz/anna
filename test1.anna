/*
class Foo
{
    property Int count getter getCount, setter setCount;
    var Int tralala;
    
    function Int getCount() private
    {
        return this.tralala;
    };

    function setCount(Int val) private
    {
      this.tralala=val;
        return val;
    };

}

class Bar
	extends Foo
{
    
    function ggg()
    {
	return 7;
    }
    
}

var bbb = Bar();
bbb.tralala=7;

print(bbb.count);
*/

macro noop(node, foo, bar)
{
    if(node.count == 1)
    {
	return node[0];
    }
    else
    {
	return node.error("Expected exactly one argument to macro noop");
    }
}

macro weeo(node, foo, bar)
{
    var wee = AST(print(ggg,"\n"));
    return wee.replace(AST(ggg), AST(foo));
}

function main()
{
    var foo = 7;
    weeo();
    print(noop(9));
}

macro __enumAttribute__(node, foo, bar)
{
    var def = node[1] as Call;
    var body = def[3] as Call;
    
    if(!body)
    {
	node.error("Missing body");
	return null;
    }
    
    return def;
}


class Blubb enum
{
    foo; bar; baz;    
}
/*

=>

class Blubb 
{
    var Int value readonly;

    function __init__(Int value)
    {
	if(value in [foo, bar, baz))
	{
	    this.value=value;
	}
    }

    var Int foo readonly = 0;
    ...

    function String name() property
    {
	switch(this.value)
	{
	    case this.foo:
		return "foo";
	    case bar:
		...;
	}	
    }

}
*/
    

main();

/*
Class Range template (T:Int)
{

    var T from;
    var T to;
    var T step;
    
    function __init__(T from, T to, T step)
    {
	this.from = from;
	this.to=to;
	this.step=step;
    }
    
    function __eachPair__(function Null f (Int key, T value))
    {
	var i=this.from;
	var idx = 0;
	
	while(i<this.to)
	{
	    f(idx, i);
	    i = i+this.step;
	    idx++;
	}
	return null;
    }
    
}
*/
/*
(1..10).each(key:value)
{
    print(value, "\n");
}
*/
/*
var r = Range<Float>(1.0, 12.0, 1.5);

r.each(key:value)
{
    print(value,"\n");
}
*/
/*
var lst = List<Int>();

lst ~= 3;
lst ~= 5;
lst ~= 1;

print((lst.first(i){i!=3})~"foo");
*/
/*
lst.filter(i){i>2}.each(i){print(i)}
*/

/*
function foo(Int in){
	if(in >4){
		return 32;
	}
	else {
		return "hej";
	}	 
	return in+1;
}

function bar(){"ggg"}

print(bar());

print(foo(31));
print("Hej");
*/
