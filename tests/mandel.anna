type Complex
{
    var Float real;
    var Float img;
    
    def Object __init__(Float r, Float i)
    {
	this.real = r;
	this.img = i;
    }
    
    def __add__Complex__(Complex other)
    {
    	Complex(
	    this.real + other.real, 
	    this.img + other.img);
    }
    
    def __add__Float__(Float other)
    {
	Complex(this.real + other, this.img);
    }
    
    def Complex __sub__Complex__(Complex other)
    {
	Complex(this.real - other.real, this.img - other.img);
    }

    def __sub__Float__(Float other)
    {
	Complex(this.real - other, this.img);
    }
    
    def __mul__Complex__(Complex other)
    {
	Complex(
	    this.real * other.real -this.img*other.img, 
	    this.real * other.img + this.img*other.real);
    }
    
    def __mul__Float__(Float other)
    {
	Complex(this.real * other, this.img*other);
    }
    
    def __div__Complex__(Complex other)
    {
	var divisor = other.real*other.real + other.img*other.img;
	Complex(
	    (this.real * other.real  + this.img*other.img)/divisor, 
	    (this.img * other.real - this.real*other.img)/divisor);
    }
    
    def __div__Float__(Float other)
    {
	 Complex(this.real / other, this.img / other);
    }
    
    def __abs__()
    {
	@sqrt (this.real*this.real + this.img*this.img);
    }
    
}

def mandelbrot(Complex p0, Int maxStep)
{
    var p = p0;
    var step = 0;
    while(@abs p < 2.0 and step++ < maxStep) 
    {
        p = p*p + p0;
    }
    step;
}

def main()
{
    var y=-1.3;
    while(y<=0.9)
    {
	var x=-2.0;
	while(x<=1.3)
	{
	    print(" .::!!!ooooOOOOO################ "[mandelbrot(Complex(x,y),32)]);
	    x += 0.05;
	}
	y += 0.1;
	print("\n");
    }
}
