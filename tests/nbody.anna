def combinations(%Collection item) (template(%Collection: List)){
    result :== «Pair«staticType(item.first),staticType(item.first)»»[]
    item.each(idx, it){
	item[idx+1...].each(idx2, it2) { result.push( it|it2) }
    }
    return result
}

def main() {
    n :== Int::convert(system.argument[1]) or 50_000
    nbod :== NBodySystem()
    print(nbod.energy().format(digits:9))
    nbod.advance(n, 0.01)
    print(nbod.energy().format(digits:9))
}

class NBodySystem {
    var List«Body» bodies
    var List«Pair«Body,Body»» pairs
    
    def __init__(){
	bodies = [
            sun(),
            jupiter(),
            saturn(),
            uranus(),
            neptune()
	    ]
	pairs = combinations(bodies)

        px := 0.0, py := 0.0, pz := 0.0
	bodies.each(body){
	    px += body.vx * body.mass
	    py += body.vy * body.mass
	    pz += body.vz * body.mass
	}
	bodies[0].offsetMomentum(px,py,pz)
    }
    
    def advance(Int n, Float dt) {
	(0..n).each(nn){ 
	    pairs.each(p){
  	        iBody :== p.first
	        jBody :== p.second
	        dx :== iBody.x - jBody.x
	        dy :== iBody.y - jBody.y
	        dz :== iBody.z - jBody.z
		
	        mag :== dt * ((dx * dx + dy * dy + dz * dz) ^exp -1.5)
	        jm :== jBody.mass * mag
	        im :== iBody.mass * mag

		iBody.vx -= dx * jm
		iBody.vy -= dy * jm
		iBody.vz -= dz * jm
		
		jBody.vx += dx * im
		jBody.vy += dy * im
		jBody.vz += dz * im
	    }
	    
	    bodies.each(body){
		body.x += dt * body.vx
		body.y += dt * body.vy
		body.z += dt * body.vz
	    }
	}
    }
    
    def energy(){
	e := 0.0
	
	bodies.each(body){
	    e += 0.5 * body.mass *
		( body.vx * body.vx
		  + body.vy * body.vy
		  + body.vz * body.vz )
	}
	pairs.each(p){
	    iBody :== p.first
	    jBody :== p.second
	    dx :== iBody.x - jBody.x
	    dy :== iBody.y - jBody.y
	    dz :== iBody.z - jBody.z
	    distance :== math.sqrt(dx*dx + dy*dy + dz*dz)
	    e -= (iBody.mass * jBody.mass) / distance
	}
	return e
    }
}

solarMass :== 4 * math.pi * math.pi
daysPerYear :== 365.24

def jupiter(){
    p :== Body()
    p.x = 4.84143144246472090
    p.y = -1.16032004402742839
    p.z = -0.103622044471123109
    p.vx = 0.00166007664274403694 * daysPerYear
    p.vy = 0.00769901118419740425 * daysPerYear
    p.vz = -0.0000690460016972063023 * daysPerYear
    p.mass = 0.000954791938424326609 * solarMass
    p
}

def saturn(){
    p :== Body()
    p.x = 8.34336671824457987
    p.y = 4.12479856412430479
    p.z = -0.403523417114321381
    p.vx = -0.00276742510726862411 * daysPerYear
    p.vy = 0.00499852801234917238 * daysPerYear
    p.vz = 0.0000230417297573763929 * daysPerYear
    p.mass = 0.000285885980666130812 * solarMass
    p
}

def uranus(){
    p :== Body()
    p.x = 12.8943695621391310
    p.y = -15.1111514016986312
    p.z = -0.223307578892655734
    p.vx = 0.00296460137564761618 * daysPerYear
    p.vy = 0.00237847173959480950 * daysPerYear
    p.vz = -0.0000296589568540237556 * daysPerYear
    p.mass = 0.0000436624404335156298 * solarMass
    p
}

def neptune(){
    p :== Body()
    p.x = 15.3796971148509165
    p.y = -25.9193146099879641
    p.z = 0.179258772950371181
    p.vx = 0.00268067772490389322 * daysPerYear
    p.vy = 0.00162824170038242295 * daysPerYear
    p.vz = -0.0000951592254519715870 * daysPerYear
    p.mass = 0.0000515138902046611451 * solarMass
    p
}

def sun(){
    p :== Body()
    p.mass = solarMass
    p
}

class Body {

    expandCode(
	var Float %name,
	name: [x, y, z, vx, vy, vz, mass])

    def __init__(){
	expandCode(
	    this.%name = 0.0,
	    name: [x, y, z, vx, vy, vz, mass])
    }

    def offsetMomentum(Float px, Float py, Float pz){
	vx = -px / solarMass
	vy = -py / solarMass
	vz = -pz / solarMass
	this
    }
}
