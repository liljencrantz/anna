#! /bin/bash

echo "
/*
  WARNING! This file is automatically generated by the make_anna_vm_short_circut.sh script.
  Do not edit it directly, your changes will be overwritten!
*/
"

for i in "ADD +" "SUB -" "INCREASE_ASSIGN +" "DECREASE_ASSIGN -" "MUL *" "DIV /"; do
    name=$(echo "$i"|cut -f 1 -d ' ')
    op=$(echo "$i"|cut -f 2- -d ' ')

echo "    
  ANNA_LAB_${name}_INT:
    {
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	if(likely(anna_is_int(i1) && anna_is_int(i2)))
	{
	    anna_vmstack_push_int(stack, anna_as_int(i1) $op anna_as_int(i2));
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
  //          wprintf(L\"Fallback for int $name \n\");
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_${name}_INT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	stack->code += sizeof(anna_op_null_t);
	goto *jump_label[(int)*stack->code];
    }
"

done

for i in "ADD v1 + v2" "SUB v1 - v2" "INCREASE_ASSIGN v1 + v2" "DECREASE_ASSIGN v1 - v2" "MUL v1 * v2" "DIV v1 / v2" "EXP pow(v1, v2)"; do
    name=$(echo "$i"|cut -f 1 -d ' ')
    op=$(echo "$i"|cut -f 2- -d ' ')

echo "    
  ANNA_LAB_${name}_FLOAT:
    {
	anna_entry_t *i2 = anna_vmstack_pop_entry(stack);
	anna_entry_t *i1 = anna_vmstack_pop_entry(stack);
	if(likely(anna_is_float(i1) && anna_is_float(i2)))
	{
            double v1 = anna_as_float(i1);
            double v2 = anna_as_float(i2);
	    anna_vmstack_push_float(stack, $op);
	}
	else
	{
	    anna_object_t *o1 = anna_as_obj(i1);
	    
	    if(o1 == null_object)
	    {
		anna_vmstack_push_object(stack, null_object);		
	    }
	    else
	    {
//            wprintf(L\"Fallback for float $name %d %d %f %f\n\", anna_is_float(i1), anna_is_float(i2), anna_as_float(i1), anna_as_float(i2));
		anna_member_t *m = o1->type->mid_identifier[ANNA_MID_${name}_FLOAT];
		anna_object_t *wrapped = anna_as_obj_fast(o1->type->static_member[m->offset]);
		anna_function_t *fun = anna_function_unwrap(wrapped);
		anna_vmstack_push_object(stack,wrapped);
		anna_vmstack_push_object(stack,o1);
		anna_vmstack_push_entry(stack,i2);
		stack = fun->native(stack, wrapped);
	    }
	}
	
	stack->code += sizeof(anna_op_null_t);
	goto *jump_label[(int)*stack->code];
    }
"
done
