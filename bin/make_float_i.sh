#! /bin/bash


echo "
/*
  WARNING! This file is automatically generated by the make_anna_float_i.sh script.
  Do not edit it directly, your changes will be overwritten!
*/
"

init="
    anna_type_t *argv[]=
	{
	    float_type,
	    float_type
	}
    ;
    
    wchar_t *argn[]=
	{
	  L\"this\", L\"param\"
	}
    ;

    anna_type_t *i_argv[]=
	{
	    float_type,
	    int_type
	}
    ;
    
    wchar_t *i_argn[]=
	{
	  L\"this\", L\"param\"
	}
    ;

    mid_t mmid;
    anna_function_t *fun;
"

init="$init
"

for i in "__add__ v1 + v2" "__increaseAssign__ v1 + v2" "__sub__ v1 - v2" "__decreaseAssign__ v1 - v2" "__mul__ v1 * v2" "__div__ v1 / v2" "exp pow(v1, v2)"; do
    external_name=$(echo "$i"|cut -f 1 -d ' ')
    name=$(echo $external_name| tr -d _)
    op=$(echo "$i"|cut -f 2- -d ' ')
    
    init="$init
    mmid = anna_member_create_native_method(
	float_type, anna_mid_get(L\"${external_name}Float__\"), 0,
	&anna_float_i_${name}, 
	float_type,
	2, argv, argn, 0, 0);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(float_type, mmid)));
    fun->flags |= ANNA_FUNCTION_PURE;
    anna_member_alias(float_type, mmid, L\"${external_name}\");

    mmid = anna_member_create_native_method(
        float_type, anna_mid_get(L\"${external_name}Int__\"), 0, 
	&anna_float_i_int_${name}, 
	float_type,
	2, i_argv, i_argn, 0, 0);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(float_type, mmid)));
    fun->flags |= ANNA_FUNCTION_PURE;
    anna_member_alias(float_type, mmid, L\"${external_name}\");

    mmid = anna_member_create_native_method(
	float_type, anna_mid_get(L\"${external_name}IntReverse__\"), 0, 
	&anna_float_i_int_reverse_${name}, 
	float_type,
	2, i_argv, i_argn, 0, 0);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(float_type, mmid)));
    fun->flags |= ANNA_FUNCTION_PURE;
    anna_member_alias_reverse(float_type, mmid, L\"${external_name}\");

"

    echo "
ANNA_VM_NATIVE(anna_float_i_$name, 2)
{
    if(anna_entry_null(param[1]))
    {
        return null_entry;
    }  
    double v1 = anna_as_float(param[0]);
    double v2 = anna_as_float(param[1]);
    return anna_from_float($op);
}

ANNA_VM_NATIVE(anna_float_i_int_$name, 2)
{
    if(anna_entry_null(param[1]))
    {
        return null_entry;
    }  
  
    double v1 = anna_as_float(param[0]);
    double v2 = (double)anna_as_int(param[1]);
    return anna_from_float($op);
}

ANNA_VM_NATIVE(anna_float_i_int_reverse_$name, 2)
{
    if(anna_entry_null(param[1]))
    {
        return null_entry;
    }  
  
    double v1 = (double)anna_as_int(param[1]);
    double v2 = anna_as_float(param[0]);
    return anna_from_float($op);
}
"
done

init="$init
"

for i in "abs fabs(v)" "__neg__ -v" "sign ((v>0.0?1.0:(v < 0.0 ? -1.0: v)))"; do
    external_name=$(echo "$i"|cut -f 1 -d ' ')
    name=$(echo $external_name| tr -d _)
    op=$(echo "$i"|cut -f 2- -d ' ')
    
    init="$init
    mmid = anna_member_create_native_method(
	float_type, anna_mid_get(L\"${external_name}\"), 0, 
	&anna_float_i_${name}, 
	float_type,
	1, argv, argn, 0, 0);
    fun = anna_function_unwrap(anna_as_obj_fast(anna_entry_get_static(float_type, mmid)));
    fun->flags |= ANNA_FUNCTION_PURE;

"

    echo "
ANNA_VM_NATIVE(anna_float_i_$name, 1)
{
    if(anna_entry_null(param[1])) return null_entry;
    double v = anna_as_float(param[0]);
    return anna_from_float($op);
}
"
done

echo "
static void anna_float_type_i_create()
{
$init
}"

