attribute(doc("This macro module contains various prefixes for string literals to allow for string formatting."));

macro fStringLiteral(node) (
    doc("Seamlessly mix program code with text. This macro allows the placement
of arbitrary pieces of Anna code inside a String literal. The code
will be evaluated at runtime and inserted into the string. Any such
code snippets must be enclosed within %(), like in the following
example:",
"<pre class='anna-code'>
expand(stringFilter);

def main(){
    myVar := 123;
    print(f\"foo %(\\\"a\\\" ~ 4 ~ 'f') bar %(myVar) baz\");
}
</pre>",
	"The above code is equivalent to:",
"<pre class='anna-code'>
def main(){
    myVar := 123;
    print(\"foo % bar % baz\" % [\"a\" ~ 4 ~ 'f', myVar]);
}
</pre>",
	"and will output <code>foo a4f bar 123 baz</code>."
    )
){
    use(parser);
    if(node.count != 1 or !(lit := (node[0] as StringLiteral).payload)){
	node.error("Invalid formated string");
    }

    res := "".thaw;
    codeItem := "".thaw;
    code := ast([]);
    paranCount := 0;
    commentCount := 0;

    enum State {
	text, percent, code, charLiteral, stringLiteral, charLiteralBackslash,
        stringLiteralBackslash, codeSlash, singleLineComment, multiLineComment,
        multiLineCommentStar, multiLineCommentSlash
    }

    state := State::text;
    keyIdx := 0;

    lit.each(ch){
	switch(state){

	    case(State::text){
		if(ch == '%'){
		    state = State::percent;
		}
		else{
		    res ~= ch;
		}
	    }

	    case(State::percent){
		if(ch == '('){
		    state = State::code;
		}
		else{
		    state = State::text;
		    res ~= '%';
		    res ~= ch;
		}
	    }

	    case(State::code){
		switch(ch){
		    case('('){
			paranCount++;
			codeItem ~= ch;
		    }

		    case('"'){
			state = State::stringLiteral;
			codeItem ~= ch;
		    }

		    case('\''){
			state = State::charLiteral;
			codeItem ~= ch;
		    }

		    case('/'){
			state = State::codeSlash;
			codeItem ~= ch;
		    }

		    case(')'){
			if(paranCount == 0){
			    keyName := "key" ~ keyIdx;
			    keyIdx++;
			    res ~= "%(" ~ keyName ~")";

			    parsed := parse(codeItem);
			    if(!parsed){
				node.error("Invalid code");
				return ?;
			    }
			    code.push(ast(%key : %value) % ["key": StringLiteral(node, keyName), "value": parsed]);
			    codeItem.count=0;
			    state = State::text;
			}
			else{
			    codeItem ~= ch;
			    paranCount--;
			}

		    }

		    default{
			codeItem ~= ch;
		    }	
		}
	    }

	    case(State::codeSlash){
		codeItem ~= ch;
	        slashMapping := ['*': State::multiLineComment, '/': State::singleLineComment];
		slashMapping.default = State::code;
		state = slashMapping[ch];
		if(state == State::multiLineComment){
		    commentCount++;
		}
	    }

	    case(State::multiLineComment){
		codeItem ~= ch;
		switch(ch){
		    case('/'){
			state = State::multiLineCommentSlash;
		    }

		    case('*'){
			state = State::multiLineCommentStar;
		    }

		}
	    }

	    case(State::multiLineCommentStar){
		codeItem ~= ch;
		switch(ch){
		    case('/'){
			commentCount--;
			if(commentCount == 0){
			    state = State::code;
			}
		    }

		    default{
			state = State::multiLineComment;
		    }

		}
	    }

	    case(State::multiLineCommentSlash){
		codeItem ~= ch;
		switch(ch){
		    case('*'){
			commentCount++;
		    }

		    default{
			state = State::multiLineComment;
		    }

		}
	    }

	    case(State::singleLineComment){
		codeItem ~= ch;
		if(ch == '\n'){
		    state = State::code;
		}
	    }

	    case(State::charLiteral){
		codeItem ~= ch;
	        charLiteralMapping := ['\'': State::code, '\\': State::charLiteralBackslash];
		charLiteralMapping.default = State::charLiteral;
		state = charLiteralMapping[ch];
	    }

	    case(State::stringLiteral){
		codeItem ~= ch;
	        charLiteralMapping := ['"': State::code, '\\': State::stringLiteralBackslash];
		charLiteralMapping.default = State::stringLiteral;
		state = charLiteralMapping[ch];
	    }


	    case(State::charLiteralBackslash){
		codeItem ~= ch;
		state = State::charLiteral;
	    }

	    case(State::stringLiteralBackslash){
		codeItem ~= ch;
		state = State::stringLiteral;
	    }


	}
    }

    if (state != State::text){
	node.error("Invalid format string" ~ paranCount);
	return ?;
    }

    out := ast(%string % %code) % ["string": StringLiteral(node, res), "code": code];
//    print (out);
    return out;
}

macro exampleStringLiteral(node) (
    doc(
        "Mark a documentation string as a code example.",
	"All this macro really does is enclose the string literal in a &lt;pre
class='anna-code'&gt; tag. This is detected during page rendering by a
javascript that will perform syntax highlighting. For example, this is
the signature of the <a path='json' member='to'>json.to</a> function:",
	"<pre class='anna-code'>
def String to(Any o)  (
    doc(
	\"
Serialize the specified object into JSON. Since Anna has 
no boolean type, true/false values currently aren't handled.\",
	\"Usage:\",
	example\"json.to([\\\"key\\\": [1,2,?]}])
// Result: \\\"{\\\"key\\\": [1, 2, null]}\\\"\",
	\"This function internally handles Int, Float, String, 
List and HashMap types. If you want your own custom class to be 
supported, simply add a toJson method that returns a String.\"
    )
) {
    ...
}
</pre>")) {
    if(node.count != 1 or !(lit := (node[0] as StringLiteral).payload)){
	node.error("Invalid example");
    }

    return StringLiteral(node, "<pre class='anna-code'>" ~ lit ~ "</pre>");
}
