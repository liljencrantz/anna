/*
  A bunch of additional functions to be inserted into the basic builtin types
 */

def Int search__Char__(
    String this, Char ch)
(
    alias(search),
    target(String),
)
{
    this.each(idx, i){if(i == ch){return idx}}
    return ?;
}

def String __format__List__(
    String fmt, 
    List«Object» data) 
(
    alias(__format__), 
    target(String), 
)
{
    var res = "";
    var listIdx = 0;
    var i = 0;
    while(i < fmt.count)
    {
        var ch = fmt[i];
        if(ch == '%')
        {
	    if(fmt[i+1] == '%')
            {
  	        i++;
                res ~= '%'
            } else {
                res ~= data[listIdx].toString();
                listIdx++;
            }
        } else
        {
	    res ~= ch;
        }
        i++;
    }
    return res;
}

def String __format__Map__(
    String fmt, 
    HashMap«String, Object» data) 
(
    alias(__format__), 
    target(String), 
)
{
    var res = "";
    var listIdx = 0;
    var i = 0;
    while(i < fmt.count)
    {
        var ch = fmt[i];
        if(ch == '%')
        {
	    if(fmt[i+1] == '%')
            {
  	        i++;
                res ~= '%'
            } else {
	        i++;
		if(fmt[i] == '(')
		{
		    i++;
		    var end = search__Char__(fmt[i...], ')');
		    if(end)
		    {
			var name = fmt[i..(i+end)];
			res ~= data[name];
			i+=end;
		    } else {
			// ERROR
		    }
		} else
		{
		    // ERROR
		}
            }
        } else
        {
	    res ~= ch;
        }
        i++;
    }
    return res;
}

def String __filter__(
    String this, 
    def Object body(Int idx, Char value) )
(
    target(String), 
)
{
    var res = "";
    this.each(key, value){if(body(key, value)){res ~= value;}}
    return res;
}

def String hashMapToString(HashMap this)
(
    name(toString), 
    target(HashMap), 
)
{
    return "[" ~ ", ".join(this.map(key, value){"" ~ key ~ " => " ~ (value or "null")}) ~ "]";
}

def String intFormat(Int this, Int base, Char padding, Int length)
(
    name(format), 
    target(Int), 
)
{
    var digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    if(base > 36)
    {
	return ?;
    }
    var res = "";
    var neg = "";
    if(this < 0)
    {
	neg = "-";
	this = -this;
    }
    
    if(this == 0)
    {
	res = "0";
    } else 
    {
	while(this != 0)
	{
	    res = "" ~ digits[this ^mod base] ~ res;
	    this = this / base;
	}
    }
    
    if(length)
    {
	while(res.count < length)
	{
	    res = "" ~ padding ~ res;
	}
    }
    
    return neg ~ res;
}

def String pairToString(Pair this)
(
    name(toString), 
    target(Pair), 
)
{
    return "" ~ this.first ~ ":" ~ this.second;
}

def Int rangeCmp(Range this, Object other)
(
    name(__cmp__), 
    target(Range), 
)
{
    r := other as Range;
    if(!r)
    {
	return -1;
    }
    if(this.from != r.from)
    {
	return this.from-r.from;
    }

    if(this.to != r.to)
    {
	return this.to-r.to;
    }

    if(this.step != r.step)
    {
	return this.step-r.step;
    }
    return 0;
}

def rangeHashCode(Range this)
(
    name(hashCode), 
    target(Range), 
)
{
    return this.from ^bitxor (this.to ^shl 3) ^bitxor (this.step ^shl 7);
}

def listToString(List this)
    (
	target(List),
	name(toString)
	)
{
    return "[" ~ ", ".join(this.map(value){""~(value or "null")}) ~ "]";
}

