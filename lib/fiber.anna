
var MutableList«Fiber» fibers (internal);
var Fiber current (internal);
var Int fiberIndex (internal) = 0;

var reflection.Continuation entry;

class Fiber
(
    doc("A simple cooperative thread implementation")
)
{
    var reflection.Continuation continuation (internal);
    var Int idx (internal);

    def __init__()
    (doc("Create a new Fiber"))
    {
	enable();
    }

    def Object enable()
    {
	if(!fibers)
	{
	    fibers = «Fiber»[];
	}
	idx = fibers.count;
	fibers.push(this);
	this.continuation = reflection.currentContinuation;
	if(this.continuation.callCount > 0)
	{
	    run();
	    disable();
	    yield();
	}
    }

    def disable()
    {
	fibers[idx] = fibers[-1];
	fibers.count--;
	idx = ?;
    }

    def run()
    (doc("Subclasses of Fiber should reimplement this method"))
    {
    }

    def yield()(static)
    {
	if(current)
	{
	    current.continuation = reflection.currentContinuation;
	    (current.continuation.callCount == 0) or (return);
	} else{
	    entry = reflection.currentContinuation;
	    if(entry.callCount > 0)
	    {
		return;
	    }
	}
        current= fibers[fiberIndex];
	if(!current)
	{
	    entry();
	}
	fiberIndex = (fiberIndex+1) ^mod fibers.count;
	//print("Fiber %/%\n" % [fiberIndex, fibers.count]);
	current.continuation();
    }
    
}
