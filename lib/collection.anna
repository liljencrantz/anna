attribute(doc("Various functions that can be used to transform collections such as Lists and HashMap."));

use(functional);

def flatten(%T input) 
(
    template(%T:List«List»),
    doc("
Return a MutableList containing all the elements of the List of Lists given as input.")
){
    res := «staticType(input[0][0])»[];
    input.each(el){res ~= el}
    return res;
}

def zip(%T input...) 
(
    template(%T:List«Any»),
    doc("Return a MutableList of ImutableList objects, where each ImutableList
contains the i-th element from each of the argument lists. The
returned list is truncated in length to the length of the shortest
argument sequence. The specialization of the ImutableList is the
intersection of the static types of all the argument lists.")
){
    res := «ImutableList«staticType(input[0][0])»»[];
    
    (0..input[0].count).each(idx){
	list := «staticType(input[0][0])»[];
	input.each(coll){
	    if(coll.count <= idx){
		return res;
	    }
	    list.push(coll[idx]);
	}	
	res.push(list.freeze);
    }
    return res;
}

