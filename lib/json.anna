expand(stringFilter);

attribute(doc("A simple JSON library. Only Anna => Json serialization has currently been implemented."));

class JsonSerializable (doc("Types that can mask as a JsonSerializable can be converted to Json by the json.toJson function.")){
    def String toJson() (doc("Create a JSON representation of this object.")) {?}
}

def String to(Any o) 
(
    doc(
	"Serialize the specified object into JSON.",
	"Since Anna has no boolean type, there is no way to output the values true and false.",
	"Usage:",
	example"json.to([\"key\": [1,2,?]}])
// Result: \"{\"key\": [1, 2, null]}\"",
	"This function internally handles Int, Float, String, List and HashMap types. If you want your own custom class to be supported, simply add a toJson method that returns a String."
    )
){
    def escapeChar(Char ch){
	switch(ch.ordinal){
	    case('\n'.ordinal){
		return "\\n";
	    }

	    case('"'.ordinal){
		return "\\\"";
	    }

	    cases(0..32){
		return "\\x" ~ ch.ordinal.format(16).lpad(count: 2, char: '0');
	    }

	    cases(128...){
		return "\\u" ~ ch.ordinal.format(16).lpad(count: 4, char: '0');
	    }

	    default{
		return ch.toString();
	    }
	}
	return ?;
    }

    if(!o){
	return "null";
    }
    
    switch(o){
	case(str as String){
	    res := "\"".thaw;
	    str.each(ch){
		res ~= escapeChar(ch);
	    }
	    res ~= "\"";
	    return res;
	}

	case(ch as Char){
	    return "'" ~ escapeChar(ch) ~ "'";
	}
	
	case(val as Int){
	    return String::convert(val);
	}

	case(val as Float){
	    return String::convert(val);
	}

	case(lst as List){
	    return "[" ~ ", ".join(lst.map(el){to(el)}) ~ "]";
	}

	case(hmap as HashMap){
	    return "{" ~ ", ".join(hmap.map(key, el){to(String::convert(key)) ~ ": " ~ to(el)}) ~ "}";
	}

	case(ss as JsonSerializable){
	    return ss.toJson();
	}

	default{
	    raise(error.ParseError("Can't json encode object of type " ~ type(o).name));
	    return ?;
	}
    }
    return ?;
}

