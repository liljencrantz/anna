
macro enum(definition)
{
    var body = definition[2] as Call;
    definition.function = Identifier(definition, "type");
    
    var newBody = ast(
	{
	    var Int value;
	}
    );

    var nameBody = ast(
	{
	    if( !this.value)
	    {
		return "?";
	    }
	}
    );

    var init = ast(def __init__(Int value){this.value = value});

    body.each(idx,el)
    {
	var id = el as Identifier;
	if(!id)
	{
	    definition.error("Unexpected thingie");
	    return ?;
	}
	var getter = "!" ~ id.name ~ "Getter";
	var fun = ast(def %Type %name() (static) {return %Type(%value)});
	var prop = ast(var Int %name (static, property(%functionName)));
	var cmp = ast(if(this.value == %intValue){return %strValue});
	
	fun = (
	    fun % [
		"name": Identifier(definition, getter),
		"Type": definition[0].copy(),
		"value": IntLiteral(definition, idx)
		]) as Call;
	
	prop = (
	    prop % [
		"name": Identifier(definition, id.name),
		"functionName": Identifier(definition, getter)
		]) as Call;
	cmp = (
	    cmp % [
		"intValue": IntLiteral(definition, idx),
		"strValue": StringLiteral(definition, id.name)
		]) as Call;
	
	newBody ~= [fun];
	newBody ~= [prop];
	nameBody ~= [cmp]
    }

    newBody ~= [init];
    
    var nameFun = ast(def String toString(){});
    (nameFun[2] as Call)[4] = nameBody;
    newBody ~= [nameFun];
    
    definition[2] = newBody;

    print(definition,"\n");	    
//    print(nameFun,"\n");	    
    return definition;
}

