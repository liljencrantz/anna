/*
error IoError (Error) {}
*/

error IOError
{    
}

def relative?(String filename) (internal)
{
    return filename[0] != separator;
}

const separator (doc("The directory separator")) = '/';

def getCwd()
{
    b := Buffer();
    unix.io.getcwd(b, 4096);
    b.encode(nullTerminated:1);
}

def String readWholeFile(Int fd)
{
    buf := Buffer();
    res := "".thaw;
//    print("Read fd %" % [fd]);
    while(1)
    {
      count := unix.io.read(fd, buf, 4096);
//	print("Read % chars" % [count]);
	switch(count)
	{
	    case(0)
	    {
//		print("OK '%'" % [res]);
		return res;
	    }

	    case(-1)
	    {
//		print("ERROR");
//		error.raise(IoError());
		return ?;
	    }
	    
	    default
	    {
		buf.count = count;
//		print("FADFA '%'" % [buf.encode()]);
		res ~= buf.encode();
	    }

	}
    }
}

class File
(
    doc(
	"A high level object respresenting a filesystem entry such as a file, a directory or a socket. Can be used for checking the status of a file, creating a directory, reading, writing and various other operations. A File object represents a file system path; it does not always point to an actually existing file.")
)
{
    
    var List «String» path (internal, doc("The path to this file"));
    var Int fd (internal, doc("If this file is open, this is its file descriptor."));

    def __init__(String filename)
    (
	doc("Create a new file object.")
    )
    {
	if(relative?(filename))
	{
	    path = getCwd().split(separator, ?);
	    path ~= filename.split(separator, ?);
	} else {
	    path = filename.split(separator, ?);
	}
    }

    def File __join__(String name)
    (
	doc(
	    "Joins the specified subdirectory to the directory represented by the File object and returns the result.")
    )
    {
	File(filename ~ separator ~ name);
    }
    
    def String filename() (property, doc("The name of the file."),)
    {
	"" ~ separator ~ String::convert(separator).join(path)
    }
    
    def String readFile()
    (
	doc(
	    "Read the contents of the file and return it as a String.")
    )
    {
      fd := unix.io.open(this.filename, unix.io.openMode.readOnly, 0);
	if(!fd)
	{
	    raise(IOError("Failed to open file"));
	    return ?;
	}
        res := readWholeFile(fd);
	unix.io.close(fd);
	res;
    }
    
    def writeFile(String data)
    (
	doc(
	    "Write the contents of the String into the specified file.")
    )
    {
        (fd := unix.io.open(
	    this.filename, 
	    unix.io.openMode.writeOnly ^bitor 
	    unix.io.openMode.truncate ^bitor 
	    unix.io.openMode.create, 
	    0o666)) or (return ?); 
        buff := Buffer();
        ok := buff.decode(data) and unix.io.write(fd, buff, buff.count);
	return !unix.io.close(fd) and ok;
    }
    
    def open()
    (
	doc("Open the specified file for reading and writing.")
    )
    {
        fd = unix.io.open(
	    this.filename, 
	    unix.io.openMode.readWrite ^bitor unix.io.openMode.create, 
	    0o666);
	if(fd) {this} else {?};
    }

    def close()
    (
	doc("Close the specified file for reading and writing.")
    )
    {
        unix.io.close(fd)
    }

    def write(Object value...)
    (
	doc(
	    "Write the string representation of the specified objects to the file.")
    )
    {
        b := Buffer();
	value.each(v)
	{
	    b.decode(String::convert(v));
	    unix.io.write(this.fd, b, b.count);
	}
    }
  
    def Object exists?() (property, doc("This value is non-null if the file pointed to by this object currently exists."),)
    {
        buf := unix.io.Stat();
	return !unix.io.stat(this.filename, buf);
    }
    
    def Object file?() (property, doc("This value is non-null if the file pointed to by this object is a regular file"))
    {
        buf := unix.io.Stat();
	return if(!unix.io.stat(this.filename, buf))
	{
	    buf.mode ^bitand unix.io.statMode.regular != 0;
	} else {
	    ?
	}
    }

    def Object directory?() 
    (
	property, 
	doc("This value is non-null if the file pointed to by this object is a directory."),
)
    {
        buf := unix.io.Stat();
	return if(!unix.io.stat(this.filename, buf))
	{
	    buf.mode ^bitand unix.io.statMode.directory != 0;
	} else {
	    ?
	};
    }

    def makeDirectory()
    (
	doc("Creates a directory in the path specified by the File object.")
    )
    {
	(0..this.path.count).each(last)
	{
	    name := "" ~ separator ~ String::convert(separator).join(this.path[0..last+1]);
	    
	    if((!unix.io.mkdir(name, 0o777)) and !(cerror.errno in [cerror.exist]))
	    {
		print(cerror.errorString(cerror.errno));
		return ?;
	    }
	}
	return 1;
    }
    
    def Object changeDirectory()
    (
	doc(
	    "Change the current working directory to the directory represented by this File object.")
    )
    {
	unix.io.chdir(this.filename);
    }
    
    def File currentDirectory() (static, doc("Returns a File object representing the current working directory"))
    {
	File(getCwd());
    }

    def delete()
    (
	doc("Deletes the file system path represented by the File object.")
    )
    {
	unix.io.unlink(this.filename);
    }

    def String toString()
    {
	return filename;
    }

    def copyTo(File destination)
    {

	
    }

}
