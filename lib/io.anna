
type File
{
    
    var String filename (internal);
    var Int fd (internal);

    def __init__(String filename)
    (
	documentation("Create a file object")
    )
    {
        this.filename = filename;
    }
    
    def String readFile()
    (
	documentation("Read the contents of the file and return it as a String")
    )
    {
        (fd := cio.open(filename, cio.readOnly, 0)) or (return ?);
        buff := Buffer();
        res := cio.read(fd, buff, ?);
	cio.close(fd);
	return if(res){buff.encode()} else {?}
    }
    
    def writeFile(String data)
    (
	documentation("Write the contents of the String into the specified file")
    )
    {
        (fd := cio.open(filename, cio.writeOnly ^bitor cio.truncate ^bitor cio.create, 0o666)) or (return ?); 
        buff := Buffer();
        ok := buff.decode(data) and cio.write(fd, buff, ?);
	return cio.close(fd) and ok;
    }
    
    def open()
    (
	documentation("Open the specified file for reading and writing")
    )
    {
        fd = cio.open(filename, cio.readWrite, 0o666);
    }

    def close()
    (
	documentation("Close the specified file for reading and writing")
    )
    {
        cio.close(fd)
    }

    def existsGetter() (internal)
    {
	return if(cio.stat(filename)){1} else {?};
    }
    
    var Int exists 
    (
	property(existsGetter), 
	documentation(
	    "This value is non-null if the file pointed to by this object currently exists")
    );
/*    
    def isFileGetter() (internal)
    {
        (val := cio.stat(filename)) or (return ?);
	return (val[2] ^bitand cio.statMode.regular) != 0;      
    }
*/  
}
