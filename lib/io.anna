
type File
(
    documentation("A high level object respresenting a filesystem object such as a file, directory or a socket. Can be used for checking the status of a file, creating a directory, reading, writing and various other operations.")
)
{
    
    var List «String» path (internal);
    var Int fd (internal);

    def __init__(String filename)
    (
	documentation("Create a file object")
    )
    {
	if(cio.isRelative(filename))
	{
	    this.path = cio.cwd.split(cio.separator, ?);
	    this.path ~= filename.split(cio.separator, ?);
	} else {
	    this.path = filename.split(cio.separator, ?);
	}
    }
    
    def filenameGetter()
    {
	"" ~ cio.separator ~ String.convert(cio.separator).join(path)
    }
    
    var String filename (property(filenameGetter));

    def String readFile()
    (
	documentation("Read the contents of the file and return it as a String")
    )
    {
        (fd := cio.open(this.filename, cio.openMode.readOnly, 0)) or (return ?);
        buff := Buffer();
        res := cio.read(fd, buff, ?);
	cio.close(fd);
	return if(res){buff.encode()} else {?}
    }
    
    def writeFile(String data)
    (
	documentation("Write the contents of the String into the specified file")
    )
    {
        (fd := cio.open(this.filename, cio.openMode.writeOnly ^bitor cio.openMode.truncate ^bitor cio.openMode.create, 0o666)) or (return ?); 
        buff := Buffer();
        ok := buff.decode(data) and cio.write(fd, buff, ?);
	return cio.close(fd) and ok;
    }
    
    def open()
    (
	documentation("Open the specified file for reading and writing")
    )
    {
        fd = cio.open(this.filename, cio.openMode.readWrite, 0o666);
    }

    def close()
    (
	documentation("Close the specified file for reading and writing")
    )
    {
        cio.close(fd)
    }

    def existsGetter() (internal)
    {
	return if(cio.stat(this.filename)){1} else {?};
    }
    
    var Int exists 
    (
	property(existsGetter), 
	documentation(
	    "This value is non-null if the file pointed to by this object currently exists")
    );

    def isFileGetter() (internal)
    {
        (val := cio.stat(this.filename)) or (return ?);
	return (val[2] ^bitand cio.statMode.regular) != 0;      
    }

    var Int isFile 
    (
	property(isFileGetter), 
	documentation(
	    "This value is non-null if the file pointed to by this object is a regular file")
    );

    def isDirectoryGetter() (internal)
    {
        (val := cio.stat(this.filename)) or (return ?);
	return (val[2] ^bitand cio.statMode.directory) != 0;      
    }

    var Int isDirectory
    (
	property(isDirectoryGetter), 
	documentation(
	    "This value is non-null if the file pointed to by this object is a directory.")
    );

    def makeDirectory()
    {
	(0..this.path.count).each(last)
	{
	    name := "" ~ cio.separator ~ String.convert(cio.separator).join(this.path[0..last+1]);
	    
	    if(!cio.mkdir(name, 0o777) and !(cerror.errno in [cerror.exist]))
	    {
		print(cerror.errorString(cerror.errno), "\n");
		return ?;
	    }
	}
	return 1;
    }
    
    def Object changeDirectory()
    (
	"Change the current working directory to the directory represented by this File object."
    )
    {
	cio.cwd = this.filename;
    }
    
}
