
type Timezone
(doc("A Timezone object"))
{
    var String name (internal);

    def __init__(String name)(doc("Create a new Timezone object with the specified name"))
    {
	this.name = name;
    }
}

type Delta
(doc("An object representing a time delta, e.g. the difference between two points in time."))
{

    var Int year (internal); 
    var Int month (internal); 
    var Int day (internal); 
    var Int hour (internal);
    var Int minute (internal);
    var Int second (internal);
    var Int microsecond (internal);

    def __init__(
	Int year=0, Int month=0, Int day=0, 
	Int hour=0, Int minute=0, Int second=0, 
	Int microsecond=0)
    {
	expandCode(
	    this.%name = %name,
	    name: [year, month, day, hour, minute, second, microsecond]);
    }

    def __add__(Delta other)
    {
        res := Delta(
	    year+other.year, month + other.month, day+other.day, 
	    hour+other.hour, minute+ other.minute, second+other.second, 
	    microsecond+other.microsecond);
    }

    def toString()
    {
        res := «String»[];

	expandCode(
	    if(%name != 0){res ~= [%text % [String::convert(%name)]]},
	    name: [year, month, day, minute, second, microsecond],
	    text: ["% year(s)", "% month(s)", "% day(s)", "% minute(s)", "% second(s)", "% microsecond(s)"]);

	return ", ".join(res);
    }
}

type Date
(
    doc(
	"The Date object represents a point in time with microsecond precision. Dates object are always relative to a specific timezone.")
)
{
    var Int timestamp (internal);
    var Int microsecond (internal);
    var Timezone timezone (internal);

    var List«Int» broken (internal);

    def __init__(
	Int year=?, Int month=?, Int day=?, 
	Int hour=?, Int minute=?, Int second=?, 
	Int microsecond=?, Timezone timezone=?)
    {
	if(!timezone)
	{
	    timezone = Timezone(ctime.timezoneName);
	}

        lst := [year, month, day, hour, minute, second, microsecond];

	if(!lst.all?())
	{
	    tm := ctime.getTimeOfDay();
  	    brk := ctime.breakTime(tm[0], timezone.name);

	    expandCode(
		if(!%name){%name = brk[ctime.broken.%field] + %offset},
		name: [year, month, day, hour, minute, second],
		field: [year, month, dayOfMonth, hour, minute, second], 
		offset: [1900,1,0,0,0,0]);

	    if(!microsecond)
	    {
		microsecond = tm[0];
	    }
	}
	
	timestamp = ctime.mkTime(second, minute, hour, day, month-1, year-1900, ?, timezone.name);
	this.microsecond = microsecond;
	this.timezone = timezone;
	broken = ctime.breakTime(timestamp, timezone.name);
    }

    def Date __add__(Delta other)
    {
        Date(
	    year+other.year, month + other.month, day+other.day, 
	    hour+other.hour, minute+ other.minute, second+other.second, 
	    microsecond+other.microsecond,
	    timezone);
    }    
    
    def Delta __sub__(Date other)
    {
	other = other.toTimezone(timezone);
        Delta(
	    year - other.year, month - other.month, day - other.day, 
	    hour - other.hour, minute - other.minute, second - other.second, 
	    microsecond - other.microsecond);
    }
    
    def Date toTimezone(Timezone timezone)
    {
	this;
    }

    var Int year (property(yearGetter));
    def yearGetter() (internal)
    {
	broken[ctime.broken.year]+1900;
    }

    var Int month (property(monthGetter));
    def monthGetter() (internal)
    {
	broken[ctime.broken.month]+1;
    }

    var Int day (property(dayGetter));
    def dayGetter() (internal)
    {
	broken[ctime.broken.dayOfMonth];
    }

    var Int hour (property(hourGetter));
    def hourGetter() (internal)
    {
	broken[ctime.broken.hour];
    }

    var Int minute (property(minuteGetter));
    def minuteGetter() (internal)
    {
	broken[ctime.broken.minute];
    }

    var Int second (property(secondGetter));
    def secondGetter() (internal)
    {
	broken[ctime.broken.second];
    }

    var Int microsecond (property(microsecondGetter));
    def microsecondGetter() (internal)
    {
	microsecond;
    }
    
    var Int isDaylightSaving (property(isDaylightSavingGetter));
    def isDaylightSavingGetter() (internal)
    {
	broken[ctime.broken.isDaylightSaving];
    }
 
    var Int dayOfWeek (property(dayOfWeekGetter));
    def dayOfWeekGetter() (internal)
    {
	broken[ctime.broken.dayOfWeek];	
    }
    
    var Int dayOfYear (property(dayOfYearGetter));
    def dayOfYearGetter() (internal)
    {
	broken[ctime.broken.dayOfYear];	
    }

    def toString()
    {
	return "%-%-% %:%:% (%)" % 
	    [
		String::convert(year),
		String::convert(month).lpad(char:'0',count:2),
		String::convert(day).lpad(char:'0',count:2),
		String::convert(hour),
		String::convert(minute).lpad(char:'0',count:2),
		String::convert(second).lpad(char:'0',count:2),
		timezone.name
	    ];
    }

}
