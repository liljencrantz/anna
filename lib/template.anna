use(io);

macro template(node)
(
    document("
A simple proof of concept HTML templating engine. Uses a templating
system very similar to e.g, Ruby on Rails, but the template is
compiled into the calling code, in order to provide the template with
the properly typed parameters.")
)
{
    tmplText := File((node[0] as StringLiteral).payload).readFile();
    transformed := "%res ~= \"".thaw;
    code := ? as Int;
    wasBrack := ? as Int;
    first := ? as Int;
    addParen := ? as Int;
    tmplText.each(ch)
    {
	if(code)
	{
	    if(first)
	    {
		switch(ch)
		{
		    case('=')
		    {
			transformed ~= "%res ~= html.escape(";
			addParen = 1;
		    } 
		    case('!')
		    {
			transformed ~= "%res ~= (";
			addParen = 1;
		    } 
		    default
		    {
			transformed ~= ch;		    
			addParen = ?;
		    }
		}
	    } 
	    else
	    {
	    switch(ch)
	    {
		case('%')
		{
		    wasBrack = 1;
		}
		case('>')
		{
		    if(wasBrack)
		    {
			if(addParen)
			{			    

			    transformed ~= ");\n    %res ~= \"";
			} 
			else
			{
			    transformed ~= ";\n    %res ~= \"";
			}
			code = ?;
			wasBrack = ?;
		    } 
		    else
		    {
			transformed ~= ch;
		    }
		}
		default
		{
		    if(wasBrack)
		    {
			transformed ~= '%';
			wasBrack = ?;
		    }
		    transformed ~= ch;
		}
	    }
	    }
	    first = ?;
	} 
	else
	{
	    switch(ch)
	    {
		case('<')
		{
		    wasBrack = 1;
		}
		case('%')
		{
		    if(wasBrack)
		    {
			transformed ~= "\";\n    ";
			code = 1;
			wasBrack = ?;
			first = 1;
		    } 
		    else
		    {
			transformed ~= ch;
		    }
		}
		default
		{
		    if(wasBrack)
		    {
			transformed ~= '<';
			wasBrack = ?;
		    }
		    if(ch == '"')
		    {
			transformed ~= "\\";
		    }
		    transformed ~= ch;
		}
	    }
	}
    }
    transformed ~= "\";\n";
//    print(transformed);
    
    nodes := parse(transformed) as Call;
//    print(nodes);
    res := ast(
	(def String()
	{
	    %res := "".thaw
	})()
	) % ["text": Dummy(node, tmplText)];
    body := (((res as Call).function) as Call)[4] as Call;

    (1..node.count).each(idx){
        mapping := node[idx] as Call;
	body ~= [ast(%name := %val) % ["name": mapping[0], "val":mapping[1]]]
    }
    nodes.each(node){body ~= [node]}
    body ~= [ast(return %res)];
    res = res % ["res": Identifier(?,"!res")];
//    print(res, "\n");
    return res;
}

