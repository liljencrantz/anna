attribute(internal, doc("
The anna repl implementation."));

def main()
    (doc("
This is the so called repl of anna. Repl is short for Read, Evaluate
and Print-Loop, and is what implements the interactive prompt of a
programming language. If Anna is called without specifying an
application to run, this module get's run. It will show an interactive
prompt using the readLine library, and will then compile that line
into a function using the parser module, and will then execute that
function."), internal)
{
    use(parser);

    print("Welcome to anna!");
    globalClause := «Node»[];

    /*
      We use a continuation of the previous function call in order to
      sneak a peek of all the variables already declared and then add
      them to the new function used to evaluate the next statement.
    */
    previousContinuation := ? as reflection.Continuation;
    
    historyFile :== unix.env.getenv("HOME") ~ "/.anna_history";
    readLine.history.read(historyFile);
    
    while(1)
    {
        line := readLine.readLine("anna> ");
	if(!line)
	{
	    print();
	    print("Bye!");
	    if(readLine.history.write(historyFile))
	    {
		print("Failed to save history");
		print(cerror.errorString(cerror.errno));
	    }
	    unix.proc.exit(0);
	}
	if(line.count > 0)
	{
	    readLine.history.add(line);
	}
	
	(parse(line) as Call).each(ast)
	{	    
	    run := 1;
  	    isGlobal := (ast.callTo?("use") or ast.callTo?("expand"));
	    
	    variableDeclaration := ast(nothing());
	    previousContinuation.each(name, value)
	    {
		variableDeclaration.push(
		    ast(%name := %value) % [
			"name": Identifier(?, name), 
			"value": Dummy(?, value)]);
	    };

  	    moduleAst := ast(
		nothing(
		    var reflection.Continuation %cont;
		    def %fun(){%cont = reflection.currentContinuation; %variable; %ast};
		    )) % ["fun": Identifier(?, "!fun"), "ast": ast, "cont": Identifier(?, "!cont"), "variable": variableDeclaration];
	    if(isGlobal)
	    {
		run = ?;
	        moduleAst = ast(nothing(%ast)) % ["ast": ast];
	    }
	    globalClause.each(node){
		(moduleAst as Call).push(node);
		}
//	    print(moduleAst);

	    code := compile(moduleAst);
	    if(code)
	    {
		if(isGlobal)
		{
		    globalClause.push(ast);
		}
		
		if(run)
		{
		    funMemb := code.__type__.member.find(memb){memb.name=="!fun"};
  		    fun := funMemb.value(code);
		    print((fun as reflection.Block)());
		    previousContinuation = code.__type__.member.find(memb){memb.name=="!cont"}.value(code) as reflection.Continuation;
		}
	    }
	}
    }
}
