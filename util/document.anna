use(io);

type DocumentationExtractor
{

    var io.File baseDir (internal);

    def __init__()
    {
	baseDir = io.File("documentation")
    }
    
    def extractDocumentation(parser.Call attr)
    (
	internal
    )
    {
      res := "".thaw;
	attr.each(at)
	{
	    if(at.isCallTo("documentation"))
	    {
		switch((at as parser.Call)[0])
		{
		    case(str as parser.StringLiteral)
		    {
			res ~= str.payload;
		    }
		}
	    }
	}
	return res;
    }
    
    def documentMethod(reflection.Method meth, File file)
    {
        doc := extractDocumentation(meth.function.attribute);
	file.write("<hr>%\n<br>%\n\n" %[meth.function, doc]);
    }
    
    def documentType(Type t, File dir)
    {
        file := dir ~ (t.name ~ ".html");
	file.open();
	file.write("
<html>
<head>
</head>
<body>
");
	file.write( "<h1>Type %</h1>
<ul>" % [t.name]);
	t.member.each(mem)
	{
	    file.write("<li><a href='#%(name)'>%(name)</a></li>" % ["name": mem.name]);
	}
	file.write("</ul>
");
	t.member.each(mem)
	{
	    switch(mem)
	    {
		case(meth as reflection.Method)
		{
		    documentMethod(meth, file);
		}
	    }
	}
	file.write("
</body>
</html>
");
	file.close();
    }

    def documentModule(Object module)
    {
        dir := baseDir ~ module.__type__.name;
	dir.makeDirectory();
	module.__type__.member.each(mem)
	{
	    if(mem.isConstant and mem.isStatic)
	    {
	      val := mem.value(?);
		switch(val)
		{
		    case(t as Type)
		    {
			documentType(t, dir);
		    }
		}
	    }
	}
    }
    
}

def main()
{
    doc := DocumentationExtractor();
    doc.documentModule(lang);
}
