
def extractDocumentation(parser.Call attr)
{
    res := "".thaw;
    attr.each(at)
    {
	if(at.isCallTo("documentation"))
	{
	    switch((at as parser.Call)[0])
	    {
		case(str as parser.StringLiteral)
		{
		    res ~= str.payload;
		}
	    }
	}
    }
    return res;
}

def documentMethod(reflection.Method meth)
{
    doc := extractDocumentation(meth.function.attribute);
    print("    %\n%\n\n" %[meth.function, doc]);
}

def documentType(Type t)
{
    print( "Type %\n" % [t.name]);
    t.member.each(mem)
    {
	switch(mem)
	{
	    case(meth as reflection.Method)
	    {
		documentMethod(meth);
	    }
	}
    }
}

def main()
{
    lang.__type__.member.each(mem)
    {
       
	if(mem.isConstant and mem.isStatic)
	{

	    val := mem.value(?);
	    switch(val)
	    {
		case(t as Type)
		{
		    documentType(t);
		}
	    }
	}
    }
}
