use(io);

type DocumentationExtractor
(
    document("
A tool for extracting the documentation from modules and generating an
HTML manual based on it. Currently very incomplete, and needs
significant additions to the reflection API before it can be
completed, but is a nice proof of concept and exercises various less
often used code paths, which makes it useful for regression testing.")
)
{

    var io.File baseDir (internal);
    var HashMap«Object, String» pathLookup;

    def __init__()
    {
	baseDir = io.File("documentation");
	baseDir.makeDirectory();
	pathLookup = HashMap«Object, String»();
    }
    
    def extractDocumentation(parser.Call attr)
    (
	internal
    )
    {
        res := "".thaw;
	attr.each(at)
	{
	    if(at.isCallTo("documentation"))
	    {
		switch((at as parser.Call)[0])
		{
		    case(str as parser.StringLiteral)
		    {
			res ~= str.payload;
		    }
		}
	    }
	}
	return res;
    }
    
    def String getLink(Type typ)
    {
	"<a href='../%'>%</a>" % [pathLookup[typ], typ.name];

    }

    def String getSignature(reflection.Function fun)
    {
        argv := ", ".join(
	    fun.inputType.map(idx, t)
	    {
		"% %" % [getLink(t), fun.inputName[idx]]
	    });
	"def % % (%)" % [getLink(fun.outputType), fun.name, argv]
    }

    def documentMethod(reflection.Method meth, File file)
    {
        doc := extractDocumentation(meth.function.attribute);
	file.write("
<hr>
<a name='%'>%</a>
<br>
%

" % [meth.name, getSignature(meth.function), doc]);
    }
    
    def documentProperty(reflection.Property prop, File file)
    {
	file.write("
<hr>
var <a href='../%'>%</a> <a name='%'>%</a>
<br>

" % [pathLookup[prop.type], prop.type.name, prop.name, prop.name]);
    }
    
    def documentVariable(reflection.Variable vari, File file)
    {
	file.write("
<hr>
<a name='%'>%</a>
<br>

" %[vari.name, vari.name]);
    }
    
    def documentType(Type t, File dir)
    {
        file := dir ~ (t.name ~ ".html");
	file.open();
	file.write("
<html>
<head>
<title>Anna documentation for % type</title>
</head>
<body>
" % [t.name]);
	file.write( "<h1>Type %</h1>
<ul>
" % [t.name]);
	t.member.each(mem)
	{
	    file.write("<li><a href='#%(name)'>%(name)</a></li>
" % ["name": mem.name]);
	}
	file.write("</ul>
");
	t.member.each(mem)
	{
	    switch(mem)
	    {
		case(meth as reflection.Method)
		{
		    documentMethod(meth, file);
		}

		case(prop as reflection.Property)
		{
		    documentProperty(prop, file);
		}

		case(vari as reflection.Variable)
		{
		    documentVariable(vari, file);
		}
	    }
	}
	file.write("
</body>
</html>
");
	file.close();
    }

    def documentModule(Object module)
    {
        file := baseDir ~ (module.__type__.name ~ ".html");
        dir  := baseDir ~ module.__type__.name;
	dir.makeDirectory();

	module.__type__.member.each(mem)
	{
	    if(mem.isConstant and mem.isStatic)
	    {
  	        val := mem.value(?);
		switch(val)
		{
		    case(t as Type)
		    {
			pathLookup[t] = module.__type__.name ~ "/" ~ t.name ~ ".html";
		    }
		}
	    }
	}

	file.open();
	module.__type__.member.each(mem)
	{
	    
	}
	
	file.close();

	module.__type__.member.each(mem)
	{
	    if(mem.isConstant and mem.isStatic)
	    {
  	        val := mem.value(?);
		switch(val)
		{
		    case(t as Type)
		    {
			documentType(t, dir);
		    }
		}
	    }
	}
    }
}

def main()
{
    doc := DocumentationExtractor();
    doc.documentModule(lang);
}
