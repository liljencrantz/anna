
class Complex
{
    var Float real;
    var Float img;
    
    function Object __init__(Float r, Float i)
    {
	this.real = r;
	this.img = i;
    }
    
    function __add__Complex__(Complex other)
    {
	return Complex(
	    this.real + other.real, 
	    this.img + other.img);
    }
    
    function __add__Float__(Float other)
    {
	return Complex(this.real + other, this.img);
    }
    
    function Complex __sub__Complex__(Complex other)
    {
	return Complex(this.real - other.real, this.img - other.img);
    }

    function __sub__Float__(Float other)
    {
	return Complex(this.real - other, this.img);
    }
    
    function __mul__Complex__(Complex other)
    {
	return Complex(
	    this.real * other.real -this.img*other.img, 
	    this.real * other.img + this.img*other.real);
    }
    
    function __mul__Float__(Float other)
    {
	return Complex(this.real * other, this.img*other);
    }
    
    function __div__Complex__(Complex other)
    {
	var divisor = other.real*other.real + other.img*other.img;
	return Complex(
	    (this.real * other.real  + this.img*other.img)/divisor, 
	    (this.img * other.real - this.real*other.img)/divisor);
    }
    
    function __div__Float__(Float other)
    {
	return Complex(this.real / other, this.img / other);
    }
    
    function __abs__()
    {
	return @sqrt (this.real*this.real + this.img*this.img);
    }
    
}

class Range template (T:Int)
{

    var T from;
    var T to;
    var T step;
    
    function Object __init__(T from, T to)
    {
	this.from = from;
	this.to=to;
	this.step=1;
    }
    
    function __each__(function Null f (Int key, T value))
    {
	var i=this.from;
	var idx = 0;
	
	while(i<this.to)
	{
	    f(idx, i);
	    i = i+this.step;
	    idx++;
	}
	return null;
    }
    
    function getCount() private
    {
	return (this.to-this.from)/this.step;
    }

    property Int count 
	getter getCount;
}


