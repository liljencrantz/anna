/*
class Complex
{
    var Float real;
    var Float img;
    
    function Object __init__(Float r, Float i)
    {
	this.real = r;
	this.img = i;
    }
    
    function __add__Complex__(Complex other)
    {
	return Complex(
	    this.real + other.real, 
	    this.img + other.img);
    }
    
    function __add__Float__(Float other)
    {
	return Complex(this.real + other, this.img);
    }
    
    function Complex __sub__Complex__(Complex other)
    {
	return Complex(this.real - other.real, this.img - other.img);
    }

    function __sub__Float__(Float other)
    {
	return Complex(this.real - other, this.img);
    }
    
    function __mul__Complex__(Complex other)
    {
	return Complex(
	    this.real * other.real -this.img*other.img, 
	    this.real * other.img + this.img*other.real);
    }
    
    function __mul__Float__(Float other)
    {
	return Complex(this.real * other, this.img*other);
    }
    
    function __div__Complex__(Complex other)
    {
	var divisor = other.real*other.real + other.img*other.img;
	return Complex(
	    (this.real * other.real  + this.img*other.img)/divisor, 
	    (this.img * other.real - this.real*other.img)/divisor);
    }
    
    function __div__Float__(Float other)
    {
	return Complex(this.real / other, this.img / other);
    }
    
    function __abs__()
    {
	return @sqrt (this.real*this.real + this.img*this.img);
    }
    
}

class Range template (T:Int)
{

    var T from;
    var T to;
    var T step;
    
    function Object __init__(T from, T to)
    {
	this.from = from;
	this.to=to;
	this.step=1;
    }
    
    function __each__(function Null f (Int key, T value))
    {
	var i=this.from;
	var idx = 0;
	
	while(i<this.to)
	{
	    f(idx, i);
	    i = i+this.step;
	    idx++;
	}
	return null;
    }
    
    function getCount() private
    {
	return (this.to-this.from)/this.step;
    }

    property Int count 
	getter getCount;
}


class Pair template(First:Object), template(Second:Object)
{
    var First first;
    var Second second;
    
    function Object __init__(First f, Second s)
    {
	this.first = f;
	this.second=s;
    }

}

class BinaryMapNode template(Key:Int), template(Value:Object)
{
    var Key key;
    var Value value;
    var BinaryMapNode<Key, Value> left;
    var BinaryMapNode<Key, Value> right;	
    
    function Object __init__(Key key, Value value)
    {
	this.key=key;
	this.value=value;
    }
    
}

class BinaryMap template(Key:Int), template(Value:Object)
{
    var BinaryMapNode<Key,Value> root;
    
    function BinaryMap<Key,Value> __init__(Pair<Key,Value> init...)
    {
	init.each(it)
	{
	    this[it.first] = it.second;
	}
	
    }
    
    function BinaryMapNode<Key,Value> insert(BinaryMapNode<Key,Value> node,Key key, Value value)
	private
    {
	if(node)
	{
	    if(node.key>key)
	    {
		node.left=this.insert(node.left, key,value);
	    }
	    else
	    {
		if(node.key<key)
		{
		    node.right = this.insert(node.right, key,value);
		}
		else 
		{
		    node.key=key;
		    node.value=value;
		}
	    }
	}
	else
	{
	    node = BinaryMapNode<Key,Value>(key, value);		
	}
	return node;	    
    }
    
    function Value find(BinaryMapNode<Key,Value> node, Key key)
	private
    {
	if(node)
	{
	    if(node.key == key)
	    {
		return node.value;
	    }
	    if(key < node.key) 
	    {
		return this.find(node.left, key);
	    }
	    else
	    {
		return this.find(node.right, key);
	    }
	}
	return null;
    }
    
    function Value __set__Key__(Key key, Value value)
    {
	this.root = this.insert(this.root, key, value);
	return value;
    }
    
    function Value __get__Key__(Key key)
    {
	return this.find(this.root, key);
    }
    
    function toString()
    {
	return "Map";
    }

    function Object __each__(function Null f (Key key, Value value))
    {
	this.eachNode(this.root, f);
    }
    
    function Object eachNode(BinaryMapNode<Key,Value> node, function Null f (Key key, Value value))
	private
    {
	if(node)
	{
	    this.eachNode(node.left, f);
	    f(node.key, node.value);
	    this.eachNode(node.right, f);
	}
    }
}

*/